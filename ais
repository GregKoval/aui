#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

#ARCHLINUX INSTALL SCRIPTS MODE {{{
#SELECT KEYMAP {{{
select_keymap(){
  print_title "MAPA ZNAKÓW (KEYMAP) - https://wiki.archlinux.org/index.php/KEYMAP"
  print_info "Wybór KEYMAP zapisany jest w pliku /etc/rc.conf. Określa jaka mapa znaków używana jest w wirtualnych konsolach. Pliki z układem klawiatury dostarczane są przez pakiet kbd."
  OPTION=n
  while [[ $OPTION != y ]]; do
    getkeymap
    read_input_text "Potwierdź mapę znaków: $KEYMAP"
  done
  loadkeys $KEYMAP
}
#}}}
#DEFAULT EDITOR {{{
select_editor(){
  print_title "DOMYŚLNY EDYTOR"
  editors_list=("emacs" "nano" "vi" "vim" "zile");
  PS3="$prompt1"
  echo -e "Wybierz edytor\n"
  select EDITOR in "${editors_list[@]}"; do
    if contains_element "$EDITOR" "${editors_list[@]}"; then
      package_install "$EDITOR"
      break
    else
      invalid_option
    fi
  done
}
#}}}
#MIRRORLIST {{{
configure_mirrorlist(){
  local countries_code=("AU" "AT" "BY" "BE" "BR" "BG" "CA" "CL" "CN" "CO" "CZ" "DK" "EE" "FI" "FR" "DE" "GR" "HU" "IN" "IE" "IL" "IT" "JP" "KZ" "KR" "LV" "LU" "MK" "NL" "NC" "NZ" "NO" "PL" "PT" "RO" "RU" "RS" "SG" "SK" "ZA" "ES" "LK" "SE" "CH" "TW" "TR" "UA" "GB" "US" "UZ" "VN")
  local countries_name=("Australia" "Austria" "Belarus" "Belgium" "Brazil" "Bulgaria" "Canada" "Chile" "China" "Colombia" "Czech Republic" "Denmark" "Estonia" "Finland" "France" "Germany" "Greece" "Hungary" "India" "Ireland" "Israel" "Italy" "Japan" "Kazakhstan" "Korea" "Latvia" "Luxembourg" "Macedonia" "Netherlands" "New Caledonia" "New Zealand" "Norway" "Polska" "Portugal" "Romania" "Russian" "Serbia" "Singapore" "Slovakia" "South Africa" "Spain" "Sri Lanka" "Sweden" "Switzerland" "Taiwan" "Turkey" "Ukraine" "United Kingdom" "United States" "Uzbekistan" "Viet Nam")
  country_list(){
    #`reflector --list-countries | sed 's/[0-9]//g' | sed 's/^/"/g' | sed 's/,.*//g' | sed 's/ *$//g'  | sed 's/$/"/g' | sed -e :a -e '$!N; s/\n/ /; ta'`
    PS3="$prompt1"
    echo "Wybierz swój kraj:"
    select country_name in "${countries_name[@]}"; do
      if contains_element "$country_name" "${countries_name[@]}"; then
        contry_code=${countries_code[$(( $REPLY - 1 ))]}
        break
      else
        invalid_option
      fi
    done
  }
  print_title "LISTA MIRRORÓW - https://wiki.archlinux.org/index.php/Mirrors"
  print_info "Ta opcja to przewodnik po wyborze i konfiguracji serwerów lustrzanych, oraz wyświetla ich listę."
  OPTION=n
  while [[ $OPTION != y ]]; do
    country_list
    read_input_text "Potwierdź swój kraj: $country_name"
  done

  url="https://www.archlinux.org/mirrorlist/?country=${contry_code}&use_mirror_status=on"

  tmpfile=$(mktemp --suffix=-mirrorlist)

  # Get latest mirror list and save to tmpfile
  curl -so ${tmpfile} ${url}
  sed -i 's/^#Server/Server/g' ${tmpfile}

  # Backup and replace current mirrorlist file (if new file is non-zero)
  if [[ -s ${tmpfile} ]]; then
   { echo " Tworzenie kopii zapasowej oryginalnych mirrorów..."
     mv -i /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.orig; } &&
   { echo " Zamiana nowej listy w miejsce..."
     mv -i ${tmpfile} /etc/pacman.d/mirrorlist; }
  else
    echo " Nie można zaktualizować, nie może pobrać listy."
  fi
  # allow global read access (required for non-root yaourt execution)
  chmod +r /etc/pacman.d/mirrorlist
  $EDITOR /etc/pacman.d/mirrorlist
}
#}}}
#UMOUNT PARTITIONS {{{
umount_partitions(){
  mounted_partitions=(`lsblk | grep ${MOUNTPOINT} | awk '{print $7}' | sort -r`)
  swapoff -a
  for i in ${mounted_partitions[@]}; do
    umount $i
  done
}
#}}}
#CREATE PARTITION SCHEME {{{
create_partition_scheme(){
  LUKS=0
  LVM=0
  select_device(){
    devices_list=(`lsblk -d | awk '{print "/dev/" $1}' | grep 'sd\|hd\|vd'`);
    PS3="$prompt1"
    echo -e "Wybór partycji:\n"
    select device in "${devices_list[@]}"; do
      if contains_element "${device}" "${devices_list[@]}"; then
        break
      else
        invalid_option
      fi
    done
    BOOT_DISK=$device
  }
  print_title "PARTYCJONOWANIE - https://wiki.archlinux.org/index.php/Partitioning"
  print_info "Partycjonowanie dysku twardego pozwala logicznie podzielić dostępną przestrzeń na części, które są dostępne niezależnie od siebie."
  partition_layout=("Default" "LVM" "LVM+LUKS")
  PS3="$prompt1"
  echo -e "Wybierz schemat partycji:"
  select OPT in "${partition_layout[@]}"; do
    case "$REPLY" in
      1)
        create_partition
        ;;
      2)
        create_partition
        setup_lvm
        ;;
      3)
        create_partition
        setup_luks
        setup_lvm
        ;;
      *)
        invalid_option
        ;;
    esac
    [[ -n $OPT ]] && break
  done
}
#}}}
#SETUP PARTITION{{{
create_partition(){
  apps_list=("cfdisk" "cgdisk" "fdisk" "gdisk" "parted");
  PS3="$prompt1"
  echo -e "Wybierz program partycjonujący:"
  select OPT in "${apps_list[@]}"; do
    if contains_element "$OPT" "${apps_list[@]}"; then
      select_device
      case $OPT in
        parted)
          parted -a opt ${device}
          ;;
        *)
          $OPT ${device}
          ;;
      esac
      break
    else
      invalid_option
    fi
  done
}
#}}}
#SETUP LUKS {{{
setup_luks(){
  print_title "LUKS - https://wiki.archlinux.org/index.php/LUKS"
  print_info "Linux Unified Key Setup albo LUKS jest specyfikacją szyfrowania dysków stworzoną przez Clemensa Fruhwirtha i pierwotnie przeznaczoną dla Linux."
  print_danger "\tNie używaj tego dla partycji rozruchowej"
  block_list=(`lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'`)
  PS3="$prompt1"
  echo -e "Wybierz partycję:"
  select OPT in "${block_list[@]}"; do
    if contains_element "$OPT" "${block_list[@]}"; then
      cryptsetup luksFormat $OPT
      cryptsetup open --type luks $OPT crypt
      LUKS=1
      LUKS_DISK=`echo ${OPT} | sed 's/\/dev\///'`
      break
    elif [[ $OPT == "Cancel" ]]; then
      break
    else
      invalid_option
    fi
  done
}
#}}}
#SETUP LVM {{{
setup_lvm(){
  print_title "LVM - https://wiki.archlinux.org/index.php/LVM"
  print_info "LVM to menedżer woluminów logicznych dla jądra Linux; zarządza sterownikami dysków oraz podobnymi urządzeniami pamięci masowej. "
  print_warning "Ostatnia partycja zajmnie 100% wolnej, dostępnej przestrzeni"
  if [[ $LUKS -eq 1 ]]; then
    pvcreate /dev/mapper/crypt
    vgcreate lvm /dev/mapper/crypt
  else
    block_list=(`lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}'`)
    PS3="$prompt1"
    echo -e "Wybierz partycję:"
    select OPT in "${block_list[@]}"; do
      if contains_element "$OPT" "${block_list[@]}"; then
        pvcreate $OPT
        vgcreate lvm $OPT
        break
      else
        invalid_option
      fi
    done
  fi
  read -p "Wybierz numer partycji [np: 2]: " number_partitions
  i=1
  while [[ $i -le $number_partitions ]]; do
    read -p "Wpisz $iª nazwę partycji [np: home]: " partition_name
    if [[ $i -eq $number_partitions ]]; then
      lvcreate -l 100%FREE lvm -n ${partition_name}
    else
      read -p "Podaj $iª rozmiar partycji [np: 25G, 200M]: " partition_size
      lvcreate -L ${partition_size} lvm -n ${partition_name}
    fi
    i=$(( i + 1 ))
  done
  LVM=1
}
#}}}
#SELECT|FORMAT PARTITIONS {{{
format_partitions(){
  print_title "FORMATOWANIE PARTYCJI - https://wiki.archlinux.org/index.php/Format_a_partition"
  print_info "Na tym etapie wybieramy i formatujemy partycję, na której zostanie zainstalowany Archlinux"
  print_danger "\tWszystkie dane na partycji głównej i SWAP zostaną UTRACONE."
  i=0

  block_list=(`lsblk | grep 'part\|lvm' | awk '{print substr($1,3)}'`)

  # check if there is no partition
  if [[ ${#block_list[@]} -eq 0 ]]; then
    echo "Nie znaleziono partycji"
    exit 0
  fi

  partitions_list=()
  for OPT in ${block_list[@]}; do
    check_lvm=`echo $OPT | grep lvm`
    if [[ -z $check_lvm ]]; then
      partitions_list+=("/dev/$OPT")
    else
      partitions_list+=("/dev/mapper/$OPT")
    fi
  done

  # partitions based on boot system
  if [[ $UEFI -eq 1 ]]; then
    partition_name=("root" "EFI" "swap" "inna")
  else
    partition_name=("root" "swap" "inna")
  fi

  select_filesystem(){
    filesystems_list=( "btrfs" "ext2" "ext3" "ext4" "f2fs" "jfs" "nilfs2" "ntfs" "vfat" "xfs");
    PS3="$prompt1"
    echo -e "Wybierz system plików:\n"
    select filesystem in "${filesystems_list[@]}"; do
      if contains_element "${filesystem}" "${filesystems_list[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }

  disable_partition(){
    #remove the selected partition from list
    unset partitions_list[${partition_number}]
    partitions_list=(${partitions_list[@]})
    #increase i
    [[ ${partition_name[i]} != another ]] && i=$(( i + 1 ))
  }

  format_partition(){
    read_input_text "Potwierdź formatowanie partycji $1"
    if [[ $OPTION == y ]]; then
      [[ -z $3 ]] && select_filesystem || filesystem=$3
      mkfs.${filesystem} $1 \
        $([[ ${filesystem} == xfs || ${filesystem} == btrfs ]] && echo "-f") \
        $([[ ${filesystem} == vfat ]] && echo "-F32")
      fsck $1
      mkdir -p $2
      mount -t ${filesystem} $1 $2
      disable_partition
    fi
  }

  format_swap_partition(){
    read_input_text "Potwierdź formatowanie partycji $1"
    if [[ $OPTION == y ]]; then
      mkswap $1
      swapon $1
      disable_partition
    fi
  }

  create_swap(){
    swap_options=("partycja" "plik" "pomiń");
    PS3="$prompt1"
    echo -e "Wybierz ${BYellow}${partition_name[i]}${Reset} system plików:\n"
    select OPT in "${swap_options[@]}"; do
      case "$REPLY" in
        1)
          select partition in "${partitions_list[@]}"; do
            #get the selected number - 1
            partition_number=$(( $REPLY - 1 ))
            if contains_element "${partition}" "${partitions_list[@]}"; then
              format_swap_partition "${partition}"
            fi
            break
          done
          break
          ;;
        2)
          total_memory=`grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//'`
          fallocate -l ${total_memory}M ${MOUNTPOINT}/swapfile
          chmod 600 ${MOUNTPOINT}/swapfile
          mkswap ${MOUNTPOINT}/swapfile
          swapon ${MOUNTPOINT}/swapfile
          i=$(( i + 1 ))
          break
          ;;
        3)
          i=$(( i + 1 ))
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
  }

  check_mountpoint(){
    if mount | grep $2; then
      echo "Montowanie udane"
      disable_partition "$1"
    else
      echo "UWAGA: Nie zamontowano pomyślnie"
    fi
  }

  set_efi_partition(){
    efi_options=("/boot/efi" "/boot")
    PS3="$prompt1"
    echo -e "Wybierz punkt montowania EFI:\n"
    select EFI_DISK in "${efi_options[@]}"; do
      if contains_element "${EFI_DISK}" "${efi_options[@]}"; then
        break
      else
        invalid_option
      fi
    done
  }

  while true; do
    PS3="$prompt1"
    if [[ ${partition_name[i]} == swap ]]; then
      create_swap
    else
      echo -e "Wybierz partycję ${BYellow}${partition_name[i]}${Reset} :\n"
      select partition in "${partitions_list[@]}"; do
        #get the selected number - 1
        partition_number=$(( $REPLY - 1 ))
        if contains_element "${partition}" "${partitions_list[@]}"; then
          case ${partition_name[i]} in
            root)
              ROOT_PART=`echo ${partition} | sed 's/\/dev\/mapper\///' | sed 's/\/dev\///'`
              ROOT_DISK=${partition}
              format_partition "${partition}" "${MOUNTPOINT}"
              ;;
            EFI)
              set_efi_partition
              read_input_text "Formatowanie partycji ${partition}"
              if [[ $OPTION == y ]]; then
                format_partition "${partition}" "${MOUNTPOINT}${EFI_DISK}" vfat
              else
                mkdir -p "${MOUNTPOINT}${EFI_DISK}"
                mount -t vfat "${partition}" "${MOUNTPOINT}${EFI_DISK}"
                check_mountpoint "${partition}" "${MOUNTPOINT}${EFI_DISK}"
              fi
              ;;
            another)
              read -p "Punkt montowania [np: /home]:" directory
              [[ $directory == "/boot" ]] && BOOT_DISK=`echo ${partition} | sed 's/[0-9]//'`
              select_filesystem
              read_input_text "Formatowanie partycji ${partition}"
              if [[ $OPTION == y ]]; then
                format_partition "${partition}" "${MOUNTPOINT}${directory}" "${filesystem}"
              else
                read_input_text "Potwierdź fs="${filesystem}" part="${partition}" dir="${directory}""
                if [[ $OPTION == y ]]; then
                  mkdir -p ${MOUNTPOINT}${directory}
                  mount -t ${filesystem} ${partition} ${MOUNTPOINT}${directory}
                  check_mountpoint "${partition}" "${MOUNTPOINT}${directory}"
                fi
              fi
              ;;
          esac
          break
        else
          invalid_option
        fi
      done
    fi
    #check if there is no partitions left
    if [[ ${#partitions_list[@]} -eq 0 && ${partition_name[i]} != swap ]]; then
      break
    elif [[ ${partition_name[i]} == another ]]; then
      read_input_text "Skonfiguruj więcej partycji"
      [[ $OPTION != y ]] && break
    fi
  done
  pause_function
}
#}}}
#INSTALL BASE SYSTEM {{{
install_base_system(){
  print_title "INSTALACJA SYSTEMU BAZOWEGO"
  print_info "Używając skryptu pacstrap zainstalujemy system bazowy. Pakiety grupy base-devel także zostaną zainstalowane."
  pacstrap ${MOUNTPOINT} base base-devel parted btrfs-progs ntp
  WIRELESS_DEV=`ip link | grep wlp | awk '{print $2}'| sed 's/://'`
  if [[ -n $WIRELESS_DEV ]]; then
    pacstrap ${MOUNTPOINT} iw wireless_tools wpa_actiond wpa_supplicant dialog
  fi
}
#}}}
#CONFIGURE KEYMAP {{{
configure_keymap(){
  #ADD KEYMAP TO THE NEW SETUP
  echo "KEYMAP=$KEYMAP" > ${MOUNTPOINT}/etc/vconsole.conf
}
#}}}
#CONFIGURE FSTAB {{{
configure_fstab(){
  print_title "FSTAB - https://wiki.archlinux.org/index.php/Fstab"
  print_info "Plik /etc/fstab zawiera informacje o statycznym systemie plików. Określa on jak urządzenia pamięci masowej i partycje mają być zamontowane i zintegrowane z systemem ogólnym. Jest on odczytywany przez polecenie mount, aby określić, których opcji użyć przy montowaniu konkretnej partycji."
  if [[ ! -f ${MOUNTPOINT}/etc/fstab.aui ]]; then
    cp ${MOUNTPOINT}/etc/fstab ${MOUNTPOINT}/etc/fstab.aui
  else
    cp ${MOUNTPOINT}/etc/fstab.aui ${MOUNTPOINT}/etc/fstab
  fi
  if [[ $UEFI -eq 1 ]]; then
    fstab_list=("DEV" "PARTUUID" "LABEL");
  else
    fstab_list=("DEV" "UUID" "LABEL");
  fi

  PS3="$prompt1"
  echo -e "Konfiguruj fstab bazujący na:"
  select OPT in "${fstab_list[@]}"; do
    case "$REPLY" in
      1) genfstab -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab ;;
      2) if [[ $UEFI -eq 1 ]]; then
          genfstab -t PARTUUID -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
         else
          genfstab -U -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab
         fi
         ;;
      3) genfstab -L -p ${MOUNTPOINT} >> ${MOUNTPOINT}/etc/fstab ;;
      *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
  echo "Zweryfikuj swój fstab"
  [[ -f ${MOUNTPOINT}/swapfile ]] && sed -i "s/\\${MOUNTPOINT}//" ${MOUNTPOINT}/etc/fstab
  pause_function
  $EDITOR ${MOUNTPOINT}/etc/fstab
}
#}}}
#CONFIGURE HOSTNAME {{{
configure_hostname(){
  print_title "HOSTNAME - https://wiki.archlinux.org/index.php/HOSTNAME"
  print_info "Nazwa hosta to unikalna nazwa utworzona w celu identyfikacji urządzenia w sieci. Nazwy hostów są ograniczone do znaków alfanumerycznych.\nMyślnik (-) może być użyty, ale nazwa hosta nie może się nim zacząć ani zakończyć. Długość jest ograniczona do 63 znaków."
  read -p "Nazwa hosta [np: archlinux]: " host_name
  echo "$host_name" > ${MOUNTPOINT}/etc/hostname
  if [[ ! -f ${MOUNTPOINT}/etc/hosts.aui ]]; then
    cp ${MOUNTPOINT}/etc/hosts ${MOUNTPOINT}/etc/hosts.aui
  else
    cp ${MOUNTPOINT}/etc/hosts.aui ${MOUNTPOINT}/etc/hosts
  fi
  arch_chroot "sed -i '/127.0.0.1/s/$/ '${host_name}'/' /etc/hosts"
  arch_chroot "sed -i '/::1/s/$/ '${host_name}'/' /etc/hosts"
}
#}}}
#CONFIGURE TIMEZONE {{{
configure_timezone(){
  print_title "TIMEZONE - https://wiki.archlinux.org/index.php/Timezone"
  print_info "W systemie operacyjnym czas (zegar) jest określany przez cztery części: Wartość czasu, Czas standardowy (godzina), Strefa Czasowa, oraz DTS (Daylight Saving Time - Okresowe Zmiany Czasu) jeśli jest używany."
  OPTION=n
  while [[ $OPTION != y ]]; do
    settimezone
    read_input_text "Potwierdź strefę czasową (${ZONE}/${SUBZONE})"
  done
  arch_chroot "ln -s /usr/share/zoneinfo/${ZONE}/${SUBZONE} /etc/localtime"
}
#}}}
#CONFIGURE HARDWARECLOCK {{{
configure_hardwareclock(){
  print_title "HARDWARE CLOCK TIME - https://wiki.archlinux.org/index.php/Internationalization"
  print_info "Jest on ustawiany w /etc/adjtime. Ustaw tryb zegara sprzętowego, aby ujednolicić czas między systemami operacyjnymi na tym samym sprzęcie. W innym przypadku, mogą one nadpisywać czas i powodować zmiany zegara (może to powodować, że korekta zmiany czasu może być rozregulowana)."
  hwclock_list=('UTC' 'Localtime');
  PS3="$prompt1"
  select OPT in "${hwclock_list[@]}"; do
    case "$REPLY" in
      1) arch_chroot "hwclock --systohc --utc";
        ;;
      2) arch_chroot "hwclock --systohc --localtime";
        ;;
      *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
}
#}}}
#CONFIGURE LOCALE {{{
configure_locale(){
  print_title "USTAWIENIA REGIONALNE - https://wiki.archlinux.org/index.php/Locale"
  print_info "Ustawienia regionalne w Linuksie są używane w celu określenia, którego języka używa użytkownik. Ponieważ ustawienia regionalne definiują również jakie zestawy znaków są używane, ustawienie poprawnego locale jest szczególnie ważne, jeśli język zawiera znaki spoza ASCII."
  OPTION=n
  while [[ $OPTION != y ]]; do
    setlocale
    read_input_text "Potwierdź ustawienia regionalne ($LOCALE)"
  done
  echo 'LANG="'$LOCALE_UTF8'"' > ${MOUNTPOINT}/etc/locale.conf
  arch_chroot "sed -i '/'${LOCALE_UTF8}'/s/^#//' /etc/locale.gen"
  arch_chroot "locale-gen"
}
#}}}
#CONFIGURE MKINITCPIO {{{
configure_mkinitcpio(){
  print_title "MKINITCPIO - https://wiki.archlinux.org/index.php/Mkinitcpio"
  print_info "mkinitcpio to skrypt Basha używany do utworzenia środowiska z obrazu dysku uruchomieniowego (initial RAM disk)."
  [[ $LUKS -eq 1 ]] && sed -i '/^HOOK/s/block/block keymap encrypt/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  [[ $LVM -eq 1 ]] && sed -i '/^HOOK/s/filesystems/lvm2 filesystems/' ${MOUNTPOINT}/etc/mkinitcpio.conf
  arch_chroot "mkinitcpio -p linux"
}
#}}}
#INSTALL BOOTLOADER {{{
install_bootloader(){
  print_title "BOOTLOADER - https://wiki.archlinux.org/index.php/Bootloader"
  print_info "Program rozruchowy jest odpowiedzialny za ładowanie jądra i initial RAM disk przed rozpoczęciem procesu rozruchu."
  print_warning "\tPartycja główna: ${ROOT_DISK}"
  if [[ $UEFI -eq 1 ]]; then
    print_warning "\tWykryty tryb UEFI"
    bootloaders_list=("Syslinux" "Gummiboot" "Pomiń")
  else
    print_warning "\tWykryty tryb BIOS"
    bootloaders_list=("Syslinux" "Pomiń")
  fi
  PS3="$prompt1"
  echo -e "Zainstaluj program rozruchowy:\n"
  select bootloader in "${bootloaders_list[@]}"; do
    case "$REPLY" in
      1)
        pacstrap ${MOUNTPOINT} syslinux
        break
        ;;
      2)
        [[ $UEFI -eq 1 ]] && pacstrap ${MOUNTPOINT} gummiboot
        break
        ;;
      3)
        [[ $UEFI -eq 1 ]] && break || invalid_option
        ;;
      *)
        invalid_option
        ;;
    esac
    [[ $UEFI -eq 1 ]] && pacstrap ${MOUNTPOINT} efibootmgr
  done
}
#}}}
#CONFIGURE BOOTLOADER {{{
configure_bootloader(){
  case $bootloader in
    Syslinux)
      print_title "SYSLINUX - https://wiki.archlinux.org/index.php/Syslinux"
      print_info "Syslinux to zestaw programów rozruchowych umożliwiających rozruch z dysków twardych, CD, oraz poprzez sieć via PXE. Wspiera systemy plików: fat, ext2, ext3, ext4, oraz btrfs."
      syslinux_install_mode=("[MBR] Automacznie" "[PARTYCJA] Automatycznie" "Ręcznie")
      PS3="$prompt1"
      echo -e "Instalacja Syslinux:\n"
      select OPT in "${syslinux_install_mode[@]}"; do
        case "$REPLY" in
          1)
            arch_chroot "syslinux-install_update -iam"
            if [[ $LUKS -eq 1 ]]; then
              sed -i "s/APPEND root=.*/APPEND root=\/dev\/mapper\/${ROOT_PART} cryptdevice=\/dev\/${LUKS_DISK}:crypt ro/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            elif [[ $LVM -eq 1 ]]; then
              sed -i "s/sda[0-9]/\/dev\/mapper\/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            else
              sed -i "s/sda[0-9]/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            fi
            print_warning "Partycją w pytaniu jest ta, którą masz jako / (root), a nie /boot."
            pause_function
            $EDITOR ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            break
            ;;
          2)
            arch_chroot "syslinux-install_update -i"
            if [[ $LUKS -eq 1 ]]; then
              sed -i "s/APPEND root=.*/APPEND root=$ROOT_DISK cryptdevice=$LUKS_DISK:crypt ro/" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            elif [[ $LVM -eq 1 ]]; then
              sed -i "s/APPEND root=.*/APPEND root=$ROOT_DISK rw/" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            else
              sed -i "s/sda[0-9]/${ROOT_PART}/g" ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            fi
            print_warning "Partycją w pytaniu jest tą, którą masz ustawioną jako / (root), a nie /boot."
            pause_function
            $EDITOR ${MOUNTPOINT}/boot/syslinux/syslinux.cfg
            break
            ;;
          3)
            print_info "Twoja partycja rozruchowa, na której masz zamiar zainstalować Syslinux, musi być zbudowana na systemie plików FAT, ext2, ext3, ext4, albo Btrfs. Należy zainstalować go na zamontowanym katalogu, a nie partycji /dev/sdXY. Nie musisz instalować go w katalogu głównym systemu plików, np. z partycją       /dev/sda1 zamontowaną w /boot możesz zainstalować Syslinux w katalogu syslinuksa"
            echo -e $prompt3
            print_warning "mkdir /boot/syslinux\nextlinux --install /boot/syslinux "
            arch-chroot ${MOUNTPOINT}
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      ;;
    Gummiboot)
      print_title "GUMMIBOOT - https://wiki.archlinux.org/index.php/Gummiboot"
      print_info "Gummiboot jest menedżerem rozruchowym UEFI napisanym przez Kaya Sieversa i Haralda Hoyera. Jest prosty w konfiguracji, ale potrafi uruchomić tylko pliki wykonalne EFI, Linux kernel EFISTUB, UEFI Shell, grub.efi i podobne."
      print_warning "\tGummiboot mocno zaznacza, że /boot jest zamontowana do partycji EFI, a nie /boot/efi,  w celu uproszczenia aktualizacji i konfiguracji."
      gummiboot_install_mode=("Automatic" "Manual")
      PS3="$prompt1"
      echo -e "Instalacja Gummiboot:\n"
      select OPT in "${gummiboot_install_mode[@]}"; do
        case "$REPLY" in
          1)
            arch_chroot "gummiboot install"
            print_warning "Proszę sprawdzić plik .conf"
            partuuid=`blkid -s PARTUUID ${ROOT_DISK} | awk '{print $2}' | sed 's/"//g' | sed 's/^.*=//'`
            echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\troot=PARTUUID=${partuuid} rw" > ${MOUNTPOINT}/boot/loader/entries/arch.conf
            echo -e "default  arch\ntimeout  5" > ${MOUNTPOINT}/boot/loader/loader.conf
            pause_function
            $EDITOR ${MOUNTPOINT}/boot/loader/entries/arch.conf
            $EDITOR ${MOUNTPOINT}/boot/loader/loader.conf
            break
            ;;
          2)
            arch-chroot ${MOUNTPOINT}
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      ;;
  esac
  pause_function
}
#}}}
#ROOT PASSWORD {{{
root_password(){
  print_title "HASŁO ADMINISTRATORA"
  print_warning "Wpisz swoje nowe hasło administratora"
  arch_chroot "passwd"
  pause_function
}
#}}}
#FINISH {{{
finish(){
  print_title "INSTALACJA ZAKOŃCZONA"
  #COPY AUI TO ROOT FOLDER IN THE NEW SYSTEM
  print_warning "\nKopia AUI będzie przeniesiona do katalogu /root w twoim nowym systemie"
  cp -R `pwd` ${MOUNTPOINT}/root
  read_input_text "Zrestartuj system"
  if [[ $OPTION == y ]]; then
    umount_partitions
    reboot
  fi
  exit 0
}
#}}}

print_title "https://wiki.archlinux.org/index.php/Arch_Install_Scripts"
print_info "Arch Install Scripts jest zestawem skryptów Basha, które upraszczają instalację Archa."
pause_function
check_boot_system
check_connection
pacman -Sy
while true
do
  print_title "ARCHLINUX ULTIMATE INSTALL - https://github.com/helmuthdu/aui"
  echo " 1) $(mainmenu_item "${checklist[1]}" "Wybierz Mapę Znaków")"
  echo " 2) $(mainmenu_item "${checklist[2]}" "Wybierz Edytor")"
  echo " 3) $(mainmenu_item "${checklist[3]}" "Konfiguruj Listę Serwerów Lustrzanych")"
  echo " 4) $(mainmenu_item "${checklist[4]}" "Tworzenie Partycji")"
  echo " 5) $(mainmenu_item "${checklist[5]}" "Wybór|Formatowanie Partycji")"
  echo " 6) $(mainmenu_item "${checklist[6]}" "Instalacja Systemu Bazowego")"
  echo " 7) $(mainmenu_item "${checklist[7]}" "Konfiguracja Fstab")"
  echo " 8) $(mainmenu_item "${checklist[8]}" "Konfiguracja Nazwy Hosta")"
  echo " 9) $(mainmenu_item "${checklist[9]}" "Konfiguracja Strefy Czasowej")"
  echo "10) $(mainmenu_item "${checklist[10]}" "Konfiguracja Zegar Sprzętowy")"
  echo "11) $(mainmenu_item "${checklist[11]}" "Konfiguracja Locale")"
  echo "12) $(mainmenu_item "${checklist[12]}" "Konfiguracja Mkinitcpio")"
  echo "13) $(mainmenu_item "${checklist[13]}" "Instalacja Bootloader")"
  echo "14) $(mainmenu_item "${checklist[14]}" "Hasło Administratora")"
  echo ""
  echo " d) Gotowe"
  echo ""
  read_input_options
  for OPT in ${OPTIONS[@]}; do
    case "$OPT" in
      1)
        select_keymap
        checklist[1]=1
        ;;
      2)
        select_editor
        checklist[2]=1
        ;;
      3)
        configure_mirrorlist
        checklist[3]=1
        ;;
      4)
        umount_partitions
        create_partition_scheme
        checklist[4]=1
        ;;
      5)
        [[ checklist[4] -eq 0 ]] && umount_partitions
        format_partitions
        checklist[5]=1
        ;;
      6)
        install_base_system
        configure_keymap
        checklist[6]=1
        ;;
      7)
        configure_fstab
        checklist[7]=1
        ;;
      8)
        configure_hostname
        checklist[8]=1
        ;;
      9)
        configure_timezone
        checklist[9]=1
        ;;
      10)
        configure_hardwareclock
        checklist[10]=1
        ;;
      11)
        configure_locale
        checklist[11]=1
        ;;
      12)
        configure_mkinitcpio
        checklist[12]=1
        ;;
      13)
        install_bootloader
        configure_bootloader
        checklist[13]=1
        ;;
      14)
        root_password
        checklist[14]=1
        ;;
      "d")
        finish
        ;;
      *)
        invalid_option
        ;;
    esac
  done
done
#}}}
