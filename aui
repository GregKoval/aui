#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#Contribution: flexiondotorg
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

if [[ -f `pwd`/sharedfuncs ]]; then
  source sharedfuncs
else
  echo "missing file: sharedfuncs"
  exit 1
fi

#ARCHLINUX ULTIMATE INSTALL {{{
#WELCOME {{{
welcome(){
  clear
  echo -e "${Bold}Witamy w skrypcie Archlinux Ultimate Install autorstwa helmuthdu${White}"
  print_line
  echo "Wymagania:"
  echo "-> Instalacja Archlinux"
  echo "-> Uruchom skrypt jako administrator"
  echo "-> Działające połączenie internetowe"
  print_line
  echo "Skrypt może być w każdej chwili zakończony przez skrót CTRL+C"
  print_line
  echo "http://www.github.com/helmuthdu/aui"
  print_line
  echo -e "\nKopie zapasowe:"
  print_line
  # backup old configs
  [[ ! -f /etc/pacman.conf.aui ]] && cp -v /etc/pacman.conf /etc/pacman.conf.aui || echo "/etc/pacman.conf.aui";
  [[ -f /etc/ssh/sshd_config.aui ]] && echo "/etc/ssh/sshd_conf.aui";
  [[ -f /etc/sudoers.aui ]] && echo "/etc/sudoers.aui";
  pause_function
  echo ""
}
#}}}
#LOCALE SELECTOR {{{
language_selector(){
  #AUTOMATICALLY DETECTS THE SYSTEM LOCALE {{{
  #automatically detects the system language based on your locale
  LOCALE=`locale | grep LANG | sed 's/LANG=//' | cut -c1-5`
  #KDE #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == zh_CN ]]; then
    LOCALE_KDE=`echo $LOCALE | tr '[:upper:]' '[:lower:]'`
  elif [[ $LOCALE == en_US ]]; then
    LOCALE_KDE="en_gb"
  else
    LOCALE_KDE=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #FIREFOX #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == es_AR || $LOCALE == es_CL || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
    LOCALE_FF=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
  else
    LOCALE_FF=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #THUNDERBIRD #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_US || $LOCALE == en_GB || $LOCALE == es_AR || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
    LOCALE_TB=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
  elif [[ $LOCALE == es_CL ]]; then
    LOCALE_TB="es-es"
  else
    LOCALE_TB=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #HUNSPELL #{{{
  if [[ $LOCALE == pt_BR ]]; then
    LOCALE_HS=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
  elif [[ $LOCALE == pt_PT ]]; then
    LOCALE_HS="pt_pt"
  else
    LOCALE_HS=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #ASPELL #{{{
  LOCALE_AS=`echo $LOCALE | cut -d\_ -f1`
  #}}}
  #LIBREOFFICE #{{{
  if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == zh_CN ]]; then
    LOCALE_LO=`echo $LOCALE | sed 's/_/-/'`
  else
    LOCALE_LO=`echo $LOCALE | cut -d\_ -f1`
  fi
  #}}}
  #}}}
  print_title "LOCALE - https://wiki.archlinux.org/index.php/Locale"
  print_info "Locales w Linuksie jest używane do określenia, ktrego języka użytkownik używa. Ponieważ locales określa również jaki zestaw znaków jest stosowany, jego poprawne ustawienie jest szczegówlnie ważne jeśli język używa znaków spoza ASCII."
  read -p "Domyślny język: \"$LOCALE\" [Y/n]: " OPTION
  case "$OPTION" in
    "n")
      while [[ $OPTION != y ]]; do
        setlocale
        read_input_text "Potwierdź wybór języka ($LOCALE)"
      done
      sed -i '/'${LOCALE}'/s/^#//' /etc/locale.gen
      locale-gen
      localectl set-locale LANG=${LOCALE_UTF8}
      #KDE #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == zh_CN ]]; then
        LOCALE_KDE=`echo $LOCALE | tr '[:upper:]' '[:lower:]'`
      elif [[ $LOCALE == en_US ]]; then
        LOCALE_KDE="en_gb"
      else
        LOCALE_KDE=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #FIREFOX #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == es_AR || $LOCALE == es_CL || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
        LOCALE_FF=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
      else
        LOCALE_FF=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #THUNDERBIRD #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == pt_PT || $LOCALE == en_US || $LOCALE == en_GB || $LOCALE == es_AR || $LOCALE == es_ES || $LOCALE == zh_CN ]]; then
        LOCALE_TB=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
      elif [[ $LOCALE == es_CL ]]; then
        LOCALE_TB="es-es"
      else
        LOCALE_TB=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #HUNSPELL #{{{
      if [[ $LOCALE == pt_BR ]]; then
        LOCALE_HS=`echo $LOCALE | tr '[:upper:]' '[:lower:]' | sed 's/_/-/'`
      elif [[ $LOCALE == pt_PT ]]; then
        LOCALE_HS="pt_pt"
      else
        LOCALE_HS=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      #ASPELL #{{{
      LOCALE_AS=`echo $LOCALE | cut -d\_ -f1`
      #}}}
      #LIBREOFFICE #{{{
      if [[ $LOCALE == pt_BR || $LOCALE == en_GB || $LOCALE == en_US || $LOCALE == zh_CN ]]; then
        LOCALE_LO=`echo $LOCALE | sed 's/_/-/'`
      else
        LOCALE_LO=`echo $LOCALE | cut -d\_ -f1`
      fi
      #}}}
      ;;
    *)
      ;;
  esac
}
#}}}
#SELECT/CREATE USER {{{
select_user(){
  #CREATE NEW USER {{{
  create_new_user(){
    read -p "Username: " username
    useradd -m -g users -G wheel -s /bin/bash ${username}
    chfn ${username}
    passwd ${username}
    pause_function
    configure_user_account
  }
  #}}}
  #CONFIGURE USER ACCOUNT {{{
  configure_user_account(){
    #BASHRC {{{
    print_title "BASHRC - https://wiki.archlinux.org/index.php/Bashrc"
    bashrc_list=("Default" "Vanilla" "Get from github");
    PS3="$prompt1"
    echo -e "Wybierz swój .bashrc\n"
    select OPT in "${bashrc_list[@]}"; do
      case "$REPLY" in
        1)
          package_install "git"
          git clone https://github.com/helmuthdu/dotfiles
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc ~/
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc dotfiles/.yaourtrc /home/${username}/
          rm -fr dotfiles
          ;;
        2)
          cp /etc/skel/.bashrc /home/${username}
          ;;
        3)
          package_install "git"
          read -p "Wpisz nazwę użytkownika github [ex: helmuthdu]: " GITHUB_USER
          read -p "Wpisz nazwę repozytorium github [ex: aui]: " GITHUB_REPO
          git clone https://github.com/$GITHUB_USER/$GITHUB_REPO
          cp -R $GITHUB_REPO/.* /home/${username}/
          rm -fr $GITHUB_REPO
          ;;
        *)
          invalid_option
          ;;
      esac
      [[ -n $OPT ]] && break
    done
    #}}}
    #EDITOR {{{
    print_title "DOMYŚLNY EDYTOR"
    editors_list=("emacs" "nano" "vi" "vim" "zile");
    PS3="$prompt1"
    echo -e "Wybierz edytor\n"
    select EDITOR in "${editors_list[@]}"; do
      if contains_element "$EDITOR" "${editors_list[@]}"; then
        if [[ $EDITOR == vim ]]; then
          ! is_package_installed "gvim" && package_install "vim ctags"
          #VIMRC {{{
          if [[ ! -f /home/${username}/.vimrc ]]; then
            vimrc_list=("Default" "Vanilla" "Get from github");
            PS3="$prompt1"
            echo -e "Wybierz swój .vimrc\n"
            select OPT in "${vimrc_list[@]}"; do
              case "$REPLY" in
                1)
                  package_install "git"
                  git clone https://github.com/helmuthdu/vim
                  mv vim /home/${username}/.vim
                  ln -sf /home/${username}/.vim/vimrc /home/${username}/.vimrc
                  cp -R vim /home/${username}/.vim/fonts /home/${username}/.fonts
                  ;;
                3)
                  package_install "git"
                  read -p "Wpisz nazwę użytkownika github [ex: helmuthdu]: " GITHUB_USER
                  read -p "Wpisz nazwę repozytorium github [ex: vim]: " GITHUB_REPO
                  git clone https://github.com/$GITHUB_USER/$GITHUB_REPO
                  cp -R $GITHUB_REPO/.vim /home/${username}/
                  if [[ -f $GITHUB_REPO/vimrc ]]; then
                    ln -sf /home/${username}/.vim/vimrc /home/${username}/.vimrc
                  else
                    ln -sf /home/${username}/.vim/.vimrc /home/${username}/.vimrc
                  fi
                  rm -fr $GITHUB_REPO
                  ;;
                2)
                  echo "Nic nie robić..."
                  ;;
                *)
                  invalid_option
                  ;;
              esac
              [[ -n $OPT ]] && break
            done
          fi
          #}}}
        else
          package_install "$EDITOR"
        fi
        break
      else
        invalid_option
      fi
    done
    #}}}
    chown -R ${username}:users /home/${username}
  }
  #}}}
  print_title "WYBÓR/TWORZENIE KONTA UŻYTKOWNIKA - https://wiki.archlinux.org/index.php/Users_and_Groups"
  users_list=(`cat /etc/passwd | grep "/home" | cut -d: -f1`);
  PS3="$prompt1"
  echo "Dostępni użytkownicy:"
  if [[ $(( ${#users_list[@]} )) -gt 0 ]]; then
    print_warning "UWAGA: WYBRANY UŻYTKOWNIK MUSI POSIADAĆ UPRAWNIENIA SUDO"
  else
    echo ""
  fi
  select OPT in "${users_list[@]}" "Stwórz nowego użytkownika"; do
    if [[ $OPT == "Stwórz nowego użytkownika" ]]; then
      create_new_user
    elif contains_element "$OPT" "${users_list[@]}"; then
      username=$OPT
    else
      invalid_option
    fi
    [[ -n $OPT ]] && break
  done
  [[ ! -f /home/${username}/.bashrc ]] && configure_user_account;
}
#}}}
#CONFIGURE SUDO {{{
configure_sudo(){
  if ! is_package_installed "sudo" ; then
    print_title "SUDO - https://wiki.archlinux.org/index.php/Sudo"
    package_install "sudo"
  fi
  #CONFIGURE SUDOERS {{{
  if [[ ! -f  /etc/sudoers.aui ]]; then
    cp -v /etc/sudoers /etc/sudoers.aui
    ## Uncomment to allow members of group wheel to execute any command
    sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers
    ## Same thing without a password (not secure)
    #sed -i '/%wheel ALL=(ALL) NOPASSWD: ALL/s/^#//' /etc/sudoers

    #This config is especially helpful for those using terminal multiplexers like screen, tmux, or ratpoison, and those using sudo from scripts/cronjobs:
    echo "" >> /etc/sudoers
    echo 'Defaults !requiretty, !tty_tickets, !umask' >> /etc/sudoers
    echo 'Defaults visiblepw, path_info, insults, lecture=always' >> /etc/sudoers
    echo 'Defaults loglinelen=0, logfile =/var/log/sudo.log, log_year, log_host, syslog=auth' >> /etc/sudoers
    echo 'Defaults passwd_tries=3, passwd_timeout=1' >> /etc/sudoers
    echo 'Defaults env_reset, always_set_home, set_home, set_logname' >> /etc/sudoers
    echo 'Defaults !env_editor, editor="/usr/bin/vim:/usr/bin/vi:/usr/bin/nano"' >> /etc/sudoers
    echo 'Defaults timestamp_timeout=15' >> /etc/sudoers
    echo 'Defaults passprompt="[sudo] password for %u: "' >> /etc/sudoers
  fi
  #}}}
}
#}}}
#AUR HELPER {{{
choose_aurhelper(){
  print_title "POMOCNIK AUR - https://wiki.archlinux.org/index.php/AUR_Helpers"
  print_info "Programy pomocnicze AUR są napisane w celu uczynienia kożystania z Arch User Repository bardziej kofortowym."
  print_warning "\tŻadne z tych narzędzi nie są oficjalnie wspierane przez deweloperów Archa."
  aurhelper=("Yaourt" "Packer" "Pacaur")
  PS3="$prompt1"
  echo -e "Wybierz domyślnego pomocnika AUR do instalacji\n"
  select OPT in "${aurhelper[@]}"; do
    case "$REPLY" in
      1)
        print_title "YAOURT - https://wiki.archlinux.org/index.php/Yaourt"
        print_info "Yaourt (Yet AnOther User Repository Tool) to społecznościowa nakładka dla pacmana, która dodaje bezproblemowy dostęp do AUR, umożliwiając i automatyzując kompilację pakietów i instalację spośród tysięcy PKGBUILDów w AUR, jako dodatek do wielu tysięcy dostępnych pakietów binarnych Arch Linux."
        if ! is_package_installed "yaourt" ; then
          package_install "base-devel yajl namcap"
          pacman -D --asdeps yajl namcap
          aui_download_packages "package-query yaourt"
          pacman -D --asdeps package-query
          if ! is_package_installed "yaourt" ; then
            echo "Yaourt nie zainstalowany. WYJDŹ teraz"
            pause_function
            exit 0
          fi
        fi
        AUR_PKG_MANAGER="yaourt"
        ;;
      2)
        if ! is_package_installed "packer" ; then
          package_install "base-devel git jshon"
          pacman -D --asdeps jshon
          aui_download_packages "packer"
          if ! is_package_installed "packer" ; then
            echo "Packer nie zainstalowany. WYJDŹ teraz"
            pause_function
            exit 0
          fi
        fi
        AUR_PKG_MANAGER="packer"
        ;;
      3)
        if ! is_package_installed "pacaur" ; then
          package_install "base-devel yajl expac"
          pacman -D --asdeps yajl expac
          #fix pod2man path
          ln -s /usr/bin/core_perl/pod2man /usr/bin/
          aui_download_packages "cower pacaur"
          pacman -D --asdeps cower
          if ! is_package_installed "pacaur" ; then
            echo "Pacaur nie zainstalowany. WYJDŹ teraz"
            pause_function
            exit 0
          fi
        fi
        AUR_PKG_MANAGER="pacaur"
        ;;
      *)
        invalid_option
        ;;
    esac
    [[ -n $OPT ]] && break
  done
  pause_function
}
#}}}
#POWERPILL {{{
install_powerpill (){
  print_title "POWERPILL - https://wiki.archlinux.org/index.php/Powerpill"
  print_info "Powerpill jest nakładką Pacmana, która wykorzystuje równoległe i segmentowe pobieranie, aby przyspieszyć pobieranie w Pacmanie."
  read_input_text "Zainstaluj Powerpill"
  if [[ $OPTION == y ]]; then
    aur_package_install "powerpill"
  fi
  is_package_installed "powerpill" && PKG_MANAGER="powerpill"
}
#}}}
#AUTOMATIC MODE {{{
automatic_mode(){
  print_title "TRYB AUTOMATYCZNY"
  print_info "Wybierz własną instalację ze wszystkimi opcjami wstępnie wybranymi.\nUżywaj tej opcji z rozwagą."
  print_danger "\tUżywaj tego trybu tylko jeśli znasz już wszystkie opcje.\n\tNie będziesz mógł już wybrać niczego później."
  read_input_text "Uruchom Tryb Automatyczny"
  if [[ $OPTION == y ]]; then
    $EDITOR ${AUI_DIR}/aui_automode
    source ${AUI_DIR}/aui_automode
    echo -e "Rozpoczęcie instalacji."
    pause_function
    AUTOMATIC_MODE=1
  fi
}
#}}}
#CUSTOM REPOSITORIES {{{
add_custom_repositories(){
  # ENABLE MULTILIB REPOSITORY {{{
  # this option will avoid any problem with packages install
  if [[ $ARCHI == x86_64 ]]; then
    local MULTILIB=`grep -n "\[multilib\]" /etc/pacman.conf | cut -f1 -d:`
    if [[ -z $MULTILIB ]]; then
      echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
      echo -e '\nRepozytorium Multilib dodane do pliku pacman.conf'
    else
      sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
      local MULTILIB=$(( $MULTILIB + 1 ))
      sed -i "${MULTILIB}s/^#//" /etc/pacman.conf
    fi
  fi
  #}}}
  print_title "WŁASNE REPOZYTORIA - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
  read_input_text "Dodaj własne repozytoria" $CUSTOMREPO
  if [[ $OPTION == y ]]; then
    while true
    do
      print_title "WŁASNE REPOZYTORIA - https://wiki.archlinux.org/index.php/Unofficial_User_Repositories"
      echo " 1) \"Dodaj nowe repozytorium\""
      echo ""
      echo " d) GOTOWE"
      echo ""
      read -p "$prompt1" OPTION
      case $OPTION in
        1)
          read -p "Nazwa repozytorium [np: custom]: " REPONAME
          read -p "Adres repozytorium [np: file:///media/backup/Archlinux]: " REPOADDRESS
          echo -e '\n['"$REPONAME"']\nServer = '"$REPOADDRESS"/'$arch' >> /etc/pacman.conf
          echo -e '\nWłasne repozytorium dodane do pliku pacman.conf'
          pause_function
          ;;
        "d")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
  fi
  system_update
}
#}}}
#BASIC SETUP {{{
install_basic_setup(){
  print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
  package_install "bc rsync mlocate bash-completion pkgstats"
  print_title "NTPd - https://wiki.archlinux.org/index.php/NTPd"
  package_install "ntp"
  is_package_installed "ntp" && timedatectl set-ntp true
  pause_function
  print_title "(UN)COMPRESS TOOLS - https://wiki.archlinux.org/index.php/P7zip"
  package_install "zip unzip unrar p7zip"
  pause_function
  print_title "AVAHI - https://wiki.archlinux.org/index.php/Avahi"
  print_info "Avahi jest wolną implementacją Zero Configuration Networking (Zeroconf), zawierającą system grupowego odkrywania DNS/DNS-SD. Pozwala programom udostępniać i wykrywać usługi i komputery działające w sieci lokalnej bez żadnej konkretnej konfiguracji."
  package_install "avahi nss-mdns"
  is_package_installed "avahi" && system_ctl enable avahi-daemon
  is_package_installed "avahi" && system_ctl enable avahi-dnsconfd
  pause_function
  print_title "ALSA - https://wiki.archlinux.org/index.php/Alsa"
  print_info "The Advanced Linux Sound Architecture (ALSA) jest komponentem jądra Linux zastępującym oryginalny Open Sound System (OSSv3) w celu dostarczenia sterowników do kart dźwiękowych."
  package_install "alsa-utils alsa-plugins"
  [[ ${ARCHI} == x86_64 ]] && package_install "lib32-alsa-plugins"
  pause_function
  print_title "PULSEAUDIO - https://wiki.archlinux.org/index.php/Pulseaudio"
  print_info "PulseAudio jest domyślnym serwerem dźwięku, który służy jako proxy dla aplikacji muzycznych, wykożystując istniejące elementy dźwiękowe jądra jak ALSA lub OSS"
  package_install "pulseaudio pulseaudio-alsa"
  [[ ${ARCHI} == x86_64 ]] && package_install "lib32-libpulse"
  # automatically switch to newly-connected devices
  add_line "load-module module-switch-on-connect" "/etc/pulse/default.pa"
  pause_function
  print_title "NTFS/FAT/exFAT - https://wiki.archlinux.org/index.php/File_Systems"
  print_info "System plików (albo filesystem) jest środkiem do organizowania danych spodziewanych do zachowania po tym jak program kończy działanie praz zapewnienie procedur do przechowywania, pobierania i aktualizacji danych, a także zarządzanie dostępną przestrzenią na urządzeniu (-ach), które je zawierają. System plików organizuje dane w sposób efektywny i dostosowany do specyficznych cech urządzenia."
  package_install "ntfs-3g dosfstools exfat-utils fuse fuse-exfat"
  is_package_installed "fuse" && add_module "fuse"
  pause_function
}
#}}}
#SSH {{{
install_ssh(){
  print_title "SSH - https://wiki.archlinux.org/index.php/Ssh"
  print_info "Secure Shell (SSH) jest protokołem sieciowym, który pozwala na wymianę danych za pośrednictwem bezpiecznego kanału pomiędzy dwoma komputerami."
  read_input_text "Zainstaluj ssh" $SSH
  if [[ $OPTION == y ]]; then
    package_install "openssh"
    aur_package_install "rssh"
    system_ctl enable sshd
    [[ ! -f /etc/ssh/sshd_config.aui ]] && cp -v /etc/ssh/sshd_config /etc/ssh/sshd_config.aui;
    #CONFIGURE SSHD_CONF #{{{
      sed -i '/Port 22/s/^#//' /etc/ssh/sshd_config
      sed -i '/Protocol 2/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_rsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_dsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/s/^#//' /etc/ssh/sshd_config
      sed -i '/KeyRegenerationInterval/s/^#//' /etc/ssh/sshd_config
      sed -i '/ServerKeyBits/s/^#//' /etc/ssh/sshd_config
      sed -i '/SyslogFacility/s/^#//' /etc/ssh/sshd_config
      sed -i '/LogLevel/s/^#//' /etc/ssh/sshd_config
      sed -i '/LoginGraceTime/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitRootLogin/s/^#//' /etc/ssh/sshd_config
      sed -i '/HostbasedAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/StrictModes/s/^#//' /etc/ssh/sshd_config
      sed -i '/RSAAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/PubkeyAuthentication/s/^#//' /etc/ssh/sshd_config
      sed -i '/IgnoreRhosts/s/^#//' /etc/ssh/sshd_config
      sed -i '/PermitEmptyPasswords/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/AllowTcpForwarding no/d' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11Forwarding/s/no/yes/' /etc/ssh/sshd_config
      sed -i -e '/\tX11Forwarding yes/d' /etc/ssh/sshd_config
      sed -i '/X11DisplayOffset/s/^#//' /etc/ssh/sshd_config
      sed -i '/X11UseLocalhost/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/^#//' /etc/ssh/sshd_config
      sed -i '/PrintMotd/s/yes/no/' /etc/ssh/sshd_config
      sed -i '/PrintLastLog/s/^#//' /etc/ssh/sshd_config
      sed -i '/TCPKeepAlive/s/^#//' /etc/ssh/sshd_config
      sed -i '/the setting of/s/^/#/' /etc/ssh/sshd_config
      sed -i '/RhostsRSAAuthentication and HostbasedAuthentication/s/^/#/' /etc/ssh/sshd_config
    #}}}
    pause_function
  fi
}
#}}}
#NFS {{{
install_nfs(){
  print_title "NFS - https://wiki.archlinux.org/index.php/Nfs"
  print_info "NFS pozwala użytkownikowi na komputerze klienckim uzyskać dostęp do plików w sieci, w sposób podobny do tego jak to zapewnia lokalne przechowywanie."
  read_input_text "Zainstaluj nfs" $NFS
  if [[ $OPTION == y ]]; then
    package_install "nfs-utils"
    system_ctl enable rpc-idmapd
    system_ctl enable rpc-mountd
    pause_function
  fi
}
#}}}
#SAMBA {{{
install_samba(){
  print_title "SAMBA - https://wiki.archlinux.org/index.php/Samba"
  print_info "Samba jest wdrożeniem protokołu sieciowego SMB/CIFS, ułatwia udostępnianie plików i drukarek między systemami Linux i Windows jako alternatywa dla NFS."
  read_input_text "Zainstaluj Samba" $SAMBA
  if [[ $OPTION == y ]]; then
    package_install "samba smbnetfs"
    [[ ! -f /etc/samba/smb.conf ]] && cp /etc/samba/smb.conf.default /etc/samba/smb.conf
    local CONFIG_SAMBA=`cat /etc/samba/smb.conf | grep usershare`
    if [[ -z $CONFIG_SAMBA ]]; then
      # configure usershare
      export USERSHARES_DIR="/var/lib/samba/usershare"
      export USERSHARES_GROUP="sambashare"
      mkdir -p ${USERSHARES_DIR}
      groupadd ${USERSHARES_GROUP}
      chown root:${USERSHARES_GROUP} ${USERSHARES_DIR}
      chmod 1770 ${USERSHARES_DIR}
      sed -i -e '/\[global\]/a\\n   usershare path = /var/lib/samba/usershare\n   usershare max shares = 100\n   usershare allow guests = yes\n   usershare owner only = False' /etc/samba/smb.conf
      sed -i -e '/\[global\]/a\\n   socket options = IPTOS_LOWDELAY TCP_NODELAY SO_KEEPALIVE\n   write cache size = 2097152\n   use sendfile = yes\n' /etc/samba/smb.conf
      usermod -a -G ${USERSHARES_GROUP} ${username}
      sed -i '/user_allow_other/s/^#//' /etc/fuse.conf
      modprobe fuse
    fi
    echo "Enter your new samba account password:"
    pdbedit -a -u ${username}
    # enable services
    system_ctl enable smbd
    system_ctl enable nmbd
    pause_function
  fi
}
#}}}
#READAHEAD {{{
enable_readahead(){
  print_title "Readahead - https://wiki.archlinux.org/index.php/Improve_Boot_Performance"
  print_info "Systemd jest wyposażony w własną implementację readahead (odczyt z wyprzedzeniem), to powinien w zasadzie poprawić czas uruchamiania. Jednak, w zależności od wersji jądra oraz rodzaju dysku twardego, może się ono wahać (tzn. może być wolniejsze)."
  read_input_text "Uruchom Readahead" $READAHEAD
  if [[ $OPTION == y ]]; then
    system_ctl enable systemd-readahead-collect
    system_ctl enable systemd-readahead-replay
    pause_function
  fi
}
#}}}
#ZRAM {{{
install_zram (){
  print_title "ZRAM - https://wiki.archlinux.org/index.php/Maximizing_Performance"
  print_info "Zram tworzy urządzenie w pamięci RAM i kompresuje je. Jeśli używasz dla swap oznacza, że ​​część pamięci RAM może pomieścić znacznie więcej informacji, ale zużywa więcej procesora. Ciągle jednak jest to o wiele szybsze niż swapowanie do dysku twardego. Jeśli system jest często przywracany ze swap, to może poprawić jego reagowanie. Zram jest jeszcze w trakcie produkcji (nie jest więc jeszcze stabilne, używaj go z rozwagą)."
  read_input_text "Zainstaluj Zram" $ZRAM
  if [[ $OPTION == y ]]; then
    aur_package_install "zramswap"
    system_ctl enable zramswap
    pause_function
  fi
}
#}}}
#TLP {{{
install_tlp(){
  print_title "TLP - https://wiki.archlinux.org/index.php/Tlp"
  print_info "TLP jest zaawansowanym narzędziem do zarządzania energią dla Linuksa. Jest narzędziem tekstowym z automatyzacją zadań w tle i nie posiada graficznego interfejsu."
  read_input_text "Zainstaluj TLP " $TLP
  if [[ $OPTION == y ]]; then
    aur_package_install "tlp"
    tlp start
    system_ctl enable tlp
    pause_function
  fi
}
#}}}
#XORG {{{
install_xorg(){
  print_title "XORG - https://wiki.archlinux.org/index.php/Xorg"
  print_info "Xorg jest publiczną, otwartą implementacją X window system w wersji 11."
  echo "Instalacja X-Server (wym. dla środowiska graficznego, sterowników graficznych, układu klawiatury,...)"
  package_install "xorg-server xorg-server-utils xorg-xinit"
  package_install "xf86-input-synaptics xf86-input-mouse xf86-input-keyboard"
  package_install "mesa"
  package_install "gamin"
  KEYMAP=$(localectl status | grep Keymap | awk '{print $3}')
  localectl set-keymap ${KEYMAP}
  pause_function
}
#}}}
#FONT CONFIGURATION {{{
font_config(){
  while true
  do
    print_title "KONFIGURACJA FONTÓW - https://wiki.archlinux.org/index.php/Font_Configuration"
    print_info "Fontconfig jest biblioteką zaprojektowaną w celu dostarczenia listy dostępnych czcionek do aplikacji, oraz dla konfiguracji w jaki sposób te czcionki będą renderowane."
    echo " 1) Default"
    echo " 2) Infinality [Recommended]"
    echo " 3) Ubuntu ${AUR}"
    echo ""
    read_input $FONTCONFIG
    case "$OPTION" in
      1)
        is_package_installed "fontconfig-ubuntu" && pacman -Rdds freetype2-ubuntu fontconfig-ubuntu cairo-ubuntu
        pacman -S --asdeps --needed cairo fontconfig freetype2
        break
        ;;
      2)
        print_title "INFINALITY - https://wiki.archlinux.org/index.php/Infinality-bundle%2Bfonts"
        add_repository "infinality-bundle" "http://bohoomil.com/repo/\$arch"
        [[ $ARCHI == x86_64 ]] && add_repository "infinality-bundle-multilib" "http://bohoomil.com/repo/multilib/\$arch"
        pacman-key -r 962DDE58
        pacman-key --lsign-key 962DDE58
        is_package_installed "freetype2" && pacman -Rdds --noconfirm freetype2 fontconfig cairo
        is_package_installed "freetype2-ubuntu" && pacman -Rdds freetype2-ubuntu fontconfig-ubuntu cairo-ubuntu
        pacman -S --needed infinality-bundle
        [[ $ARCHI == x86_64 ]] && pacman -S --needed infinality-bundle-multilib
        break
        ;;
      3)
        is_package_installed "fontconfig" && pacman -Rdds freetype2 fontconfig cairo
        aur_package_install "freetype2-ubuntu fontconfig-ubuntu cairo-ubuntu"
        break
        ;;
      *)
        invalid_option
        ;;
    esac
  done
  pause_function
}
#}}}
#VIDEO CARDS {{{
install_video_cards(){
  package_install "dmidecode"
  print_title "KARTY GRAFICZNE"
  check_vga
  #Virtualbox {{{
  if [[ ${VIDEO_DRIVER} == virtualbox ]]; then
    package_install "virtualbox-guest-utils"
    package_install "mesa-libgl"
    add_module "vboxguest vboxsf vboxvideo" "virtualbox-guest"
    add_user_to_group ${username} vboxsf
    system_ctl disable ntpd
    system_ctl enable vbo
    VBoxClient-all
  #}}}
  #Bumblebee {{{
  elif [[ ${VIDEO_DRIVER} == bumblebee ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    is_package_installed "nouveau-dri" && pacman -Rdds --noconfirm nouveau-dri
    pacman -S --needed intel-dri xf86-video-intel bumblebee nvidia
    package_install "pangox-compat" #fix nvidia-settings
    package_install "libva-vdpau-driver"
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-nouveau-dri" && pacman -Rdds --noconfirm lib32-nouveau-dri
      pacman -S --needed lib32-nvidia-utils lib32-intel-dri
    fi
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    gpasswd -a ${username} bumblebee
  #}}}
  #NVIDIA {{{
  elif [[ ${VIDEO_DRIVER} == nvidia ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    is_package_installed "nouveau-dri" && pacman -Rdds --noconfirm nouveau-dri
    pacman -S --needed nvidia{,-utils}
    package_install "pangox-compat" #fix nvidia-settings
    package_install "libva-vdpau-driver"
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-nouveau-dri" && pacman -Rdds --noconfirm lib32-nouveau-dri
      pacman -S --needed "lib32-nvidia-utils"
    fi
    replace_line '*options nouveau modeset=1' '#options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '*MODULES="nouveau"' '#MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
    nvidia-xconfig --add-argb-glx-visuals --allow-glx-with-composite --composite -no-logo --render-accel -o /etc/X11/xorg.conf.d/20-nvidia.conf;
  #}}}
  #Nouveau [NVIDIA] {{{
  elif [[ ${VIDEO_DRIVER} == nouveau ]]; then
    is_package_installed "nvidia" && pacman -Rdds --noconfirm nvidia{,-utils}
    [[ -f /etc/X11/xorg.conf.d/20-nvidia.conf ]] && rm /etc/X11/xorg.conf.d/20-nvidia.conf
    package_install "mesa-libgl"
    package_install "xf86-video-${VIDEO_DRIVER} ${VIDEO_DRIVER}-dri"
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-nvidia-utils" && pacman -Rdds --noconfirm lib32-nvidia-utils
      pacman -S --needed "lib32-${VIDEO_DRIVER}-dri"
    fi
    replace_line '#*options nouveau modeset=1' 'options nouveau modeset=1' /etc/modprobe.d/modprobe.conf
    replace_line '#*MODULES="nouveau"' 'MODULES="nouveau"' /etc/mkinitcpio.conf
    mkinitcpio -p linux
  #}}}
  #Catalyst [ATI] {{{
  elif [[ ${VIDEO_DRIVER} == catalyst ]]; then
    XF86_DRIVERS=$(pacman -Qe | grep xf86-video | awk '{print $1}')
    [[ -n $XF86_DRIVERS ]] && pacman -Rcsn $XF86_DRIVERS
    is_package_installed "ati-dri" && pacman package_remove "ati-dri"
    [[ -f /etc/modules-load.d/ati.conf ]] && rm /etc/modules-load.d/ati.conf
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-ati-dri" && pacman -Rdds --noconfirm lib32-ati-dri
    fi
    package_install "linux-headers"
    # Add repository
    aur_package_install "catalyst-test"
    aticonfig --initial --output=/etc/X11/xorg.conf.d/20-radeon.conf
    system_ctl enable atieventsd
    system_ctl enable catalyst-hook
    system_ctl enable temp-links-catalyst
  #}}}
  #ATI {{{
  elif [[ ${VIDEO_DRIVER} == ati ]]; then
    is_package_installed "catalyst-test" && pacman -Rdds --noconfirm catalyst-test
    package_install "mesa-libgl"
    [[ -f /etc/X11/xorg.conf.d/20-radeon.conf ]] && rm /etc/X11/xorg.conf.d/20-radeon.conf
    [[ -f /etc/modules-load.d/catalyst.conf ]] && rm /etc/modules-load.d/ati.conf
    package_install "xf86-video-${VIDEO_DRIVER} ${VIDEO_DRIVER}-dri"
    if [[ ${ARCHI} == x86_64 ]]; then
      is_package_installed "lib32-catalyst-utils" && pacman -Rdds --noconfirm lib32-catalyst-utils
      package_install "lib32-${VIDEO_DRIVER}-dri"
    fi
    add_module "radeon" "ati"
  #}}}
  #Intel {{{
  elif [[ ${VIDEO_DRIVER} == intel ]]; then
    package_install "xf86-video-intel intel-dri libva-intel-driver"
    package_install "mesa-libgl"
    [[ ${ARCHI} == x86_64 ]] && package_install "lib32-mesa-libgl"
  #}}}
  #Vesa {{{
  else
    package_install "xf86-video-${VIDEO_DRIVER}"
    package_install "mesa-libgl"
    [[ ${ARCHI} == x86_64 ]] && package_install "lib32-mesa-libgl"
  fi
  #}}}
  pause_function
}
#}}}
#CUPS {{{
install_cups(){
  print_title "CUPS - https://wiki.archlinux.org/index.php/Cups"
  print_info "CUPS oparty na standardach, otwarty system drukowania tworzony przez Apple Inc. dla Mac OS X i innych UNIX-owych systemów operacyjnych."
  read_input_text "Zainstaluj CUPS (aka Common Unix Printing System)" $CUPS
  if [[ $OPTION == y ]]; then
    package_install "cups cups-filters ghostscript gsfonts"
    package_install "gutenprint foomatic-db foomatic-db-engine foomatic-db-nonfree foomatic-filters hplip splix cups-pdf"
    package_install "system-config-printer"
    system_ctl enable cups
    pause_function
  fi
}
#}}}
#ADDITIONAL FIRMWARE {{{
install_additional_firmwares(){
  print_title "INSTALACJA DODATKOWEGO FIRMWARE"
  read_input_text "Zainstaluj dodatkowe firmware [Audio,Bluetooth,Skanery,Sieć bezprzewodowa]" $FIRMWARE
  if [[ $OPTION == y ]]; then
    while true
    do
      print_title "INSTALACJA DODATKOWEGO FIRMWARE"
      echo " 1) $(menu_item "aic94xx-firmware") $AUR"
      echo " 2) $(menu_item "alsa-firmware")"
      echo " 3) $(menu_item "b43-firmware") $AUR"
      echo " 4) $(menu_item "b43-firmware-legacy") $AUR"
      echo " 5) $(menu_item "bfa-firmware") $AUR"
      echo " 6) $(menu_item "bluez-firmware") [Broadcom BCM203x/STLC2300 Bluetooth]"
      echo " 7) $(menu_item "broadcom-wl") $AUR"
      echo " 8) $(menu_item "ipw2100-fw")"
      echo " 9) $(menu_item "ipw2200-fw")"
      echo "10) $(menu_item "libffado") [Fireware Audio Devices]"
      echo "11) $(menu_item "libmtp") [Android Devices]"
      echo "12) $(menu_item "libraw1394") [IEEE1394 Driver]"
      echo ""
      echo " d) GOTOWE"
      echo ""
      FIRMWARE_OPTIONS+=" d"
      read_input_options "$FIRMWARE_OPTIONS"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            aur_package_install "aic94xx-firmware"
            ;;
          2)
            package_install "alsa-firmware"
            ;;
          3)
            aur_package_install "b43-firmware"
            ;;
          4)
            aur_package_install "b43-firmware-legacy"
            ;;
          5)
            aur_package_install "bfa-firmware"
            ;;
          6)
            package_install "bluez-firmware"
            ;;
          7)
            aur_package_install "broadcom-wl"
            ;;
          8)
            package_install "ipw2100-fw"
            ;;
          9)
            package_install "ipw2200-fw"
            ;;
          10)
            package_install "libffado"
            ;;
          11)
            package_install "libmtp"
            aur_package_install "android-udev"
            ;;
          12)
            package_install "libraw1394"
            ;;
          "d")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  fi
}
#}}}
#GIT ACCESS THRU A FIREWALL {{{
install_git_tor(){
  print_title "GIT-TOR - https://wiki.archlinux.org/index.php/Tor"
  print_info "Tor to otwarta implementacja drugiej generacji trasowania cebulowego, która zapewnia dostęp do anonimowej sieci proxy. Jego podstawowym celem jest umożliwienie anonimowości online, chroniąc przed atakami analizy ruchu."
  read_input_text "Zapewnij dostęp do GIT przez zaporę sieciową (bypass college/work firewall)" $GITTOR
  if [[ $OPTION == y ]]; then
    package_install "openbsd-netcat vidalia privoxy git"
    if [[ ! -f /usr/bin/proxy-wrapper ]]; then
      echo 'forward-socks5   /               127.0.0.1:9050 .' >> /etc/privoxy/config
      echo -e '#!/bin/bash\nnc -xlocalhost:9050 -X5 $*' > /usr/bin/proxy-wrapper
      chmod +x /usr/bin/proxy-wrapper
      echo -e '\nexport GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"' >> /etc/bash.bashrc
      export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"
      su - ${username} -c 'export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"'
    fi
    groupadd -g 42 privoxy
    useradd -u 42 -g privoxy -s /bin/false -d /etc/privoxy privoxy
    system_ctl start tor
    system_ctl start privoxy
    system_ctl enable tor
    system_ctl enable privoxy
    pause_function
  fi
}
#}}}
#DESKTOP ENVIRONMENT {{{
install_desktop_environment(){
  install_icon_theme() { #{{{
    while true
    do
      print_title "IKONY GNOME"
      echo " 1) $(menu_item "faenza-icon-theme")"
      echo " 2) $(menu_item "faience-icon-theme")"
      echo " 3) $(menu_item "moka-icon-theme")"
      echo " 4) $(menu_item "nitrux-icon-theme")"
      echo " 5) $(menu_item "numix-icon-theme-git")"
      echo ""
      echo " b) POWRÓT"
      echo ""
      ICONS_THEMES+=" b"
      read_input_options "$ICONS_THEMES"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            package_install "faenza-icon-theme"
            ;;
          2)
            package_install "faience-icon-theme"
            ;;
          3)
            package_remove "moka-icon-theme-git"
            package_remove "moka-icon-theme"
            aur_package_install "moka-icons-git"
            ;;
          4)
            aur_package_install "nitrux-icon-theme"
            ;;
          5)
            aur_package_install "numix-icon-theme-git numix-circle-icon-theme-git"
            ;;
          "b")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  } #}}}
  install_gtk_theme() { #{{{
    while true
    do
      print_title "TEMATY GTK2/GTK3"
      echo " 1) $(menu_item "xfce-theme-greybird-git" "Greybird")"
      echo " 2) $(menu_item "numix-themes-git" "Numix")"
      echo " 3) $(menu_item "gtk-theme-orion-git" "Orion")"
      echo " 4) $(menu_item "zukitwo-themes" "Zukitwo")"
      echo ""
      echo " b) POWRÓT"
      echo ""
      GTK_THEMES+=" b"
      read_input_options "$GTK_THEMES"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            aur_package_install "xfce-theme-greybird-git"
            ;;
          2)
            aur_package_install "numix-themes-git"
            ;;
          3)
            aur_package_install "gtk-theme-orion-git"
            ;;
          4)
            aur_package_install "zukitwo-themes"
            ;;
          "b")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  } #}}}
  install_display_manager() { #{{{
    while true
    do
      print_title "MENEDŻER LOGOWANIA - https://wiki.archlinux.org/index.php/Display_Manager"
      print_info "Menedżer wyświetlania, albo menedżer logowania, jest ekranem graficznego interfejsu, który jest wyświetlany po zakończeniu procesu uruchamiania zamiast domyślnej powłoki."
      echo " 1) $(menu_item "entrance-git" "Entrance") $AUR"
      echo " 2) $(menu_item "gdm" "GDM")"
      echo " 3) $(menu_item "lightdm" "LightDM") $AUR"
      echo " 4) $(menu_item "lxdm" "LXDM")"
      echo " 5) $(menu_item "slim")"
      echo ""
      echo " b) POWRÓT/POMIŃ"
      echo ""
      DISPLAY_MANAGER+=" b"
      read_input_options "$DISPLAY_MANAGER"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            aur_package_install "entrance-git"
            system_ctl enable entrance
            ;;
          2)
            package_install "gdm"
            system_ctl enable gdm
            ;;
          3)
            if [[ ${KDE} -eq 1 ]]; then
              package_install "lightdm lightdm-kde-greeter"
            else
              package_install "lightdm lightdm-gtk3-greeter"
            fi
            system_ctl enable lightdm
            ;;
          4)
            package_install "lxdm"
            system_ctl enable lxdm
            ;;
          5)
            package_install "slim"
            system_ctl enable slim
            ;;
          "b")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  } #}}}
  install_themes() { #{{{
    while true
    do
      print_title "$1 TEMATY"
      echo " 1) $(menu_item "faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme nitrux-icon-theme numix-circle-icon-theme-git" "Icons Themes") $AUR"
      echo " 2) $(menu_item "xfce-theme-greybird-git gtk-theme-numix-git gtk-theme-orion-git zukitwo-themes" "GTK Themes") $AUR"
      echo ""
      echo " d) GOTOWE"
      echo ""
      THEMES_OPTIONS+=" d"
      read_input_options "$THEMES_OPTIONS"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            install_icon_theme
            OPT=1
            ;;
          2)
            install_gtk_theme
            OPT=2
            ;;
          "d")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  } #}}}
  install_misc_apps() { #{{{
    while true
    do
      print_title "$1 PODSTAWOWE PROGRAMY"
      echo " 1) $(menu_item "entrance-git gdm lightdm lxdm slim" "Display Manager") $AUR"
      echo " 2) $(menu_item "dmenu")"
      echo " 3) $(menu_item "viewnior")"
      echo " 4) $(menu_item "gmrun")"
      echo " 5) $(menu_item "pcmanfm" "PCManFM")"
      echo " 6) $(menu_item "rxvt-unicode")"
      echo " 7) $(menu_item "scrot")"
      echo " 8) $(menu_item "squeeze-git") $AUR"
      echo " 9) $(menu_item "thunar")"
      echo "10) $(menu_item "tint2")"
      echo "11) $(menu_item "volwheel")"
      echo "12) $(menu_item "xfburn")"
      echo "13) $(menu_item "xcompmgr")"
      echo "14) $(menu_item "zathura")"
      echo ""
      echo " d) GOTOWE"
      echo ""
      MISCAPPS+=" d"
      read_input_options "$MISCAPPS"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            install_display_manager
            OPT=1
            ;;
          2)
            package_install "dmenu"
            ;;
          3)
            package_install "viewnior"
            ;;
          4)
            package_install "gmrun"
            ;;
          5)
            package_install "pcmanfm gvfs"
            ;;
          6)
            package_install "rxvt-unicode"
            ;;
          7)
            package_install "scrot"
            ;;
          8)
            aur_package_install "squeeze-git"
            ;;
          9)
            package_install "thunar tumbler"
            ;;
          10)
            package_install "tint2"
            ;;
          11)
            package_install "volwheel"
            ;;
          12)
            package_install "xfburn"
            ;;
          13)
            package_install "xcompmgr transset-df"
            ;;
          14)
            package_install "zathura"
            ;;
          "d")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  } #}}}
  print_title "ŚRODOWISKO GRAFICZNE|MENEDŻER OKIEN"
  print_info "Środowisko Graficzne (ŚG) zapewnia kompletny graficzny interfejs dla systemu poprzez łączenie ze sobą różnorodnych klientów X-ów napisanych przy użyciu wspólnego zestawu widgetów i bibliotek.\n\nMenedżer Okien (MO) jest jednym z elementów graficznego interfejsu użytkownika danego systemu."
  echo -e "Select your ŚG albo MO:\n"
  echo " --- ŚG ---             --- MO ---"
  echo " 1) Cinnamon            8) Awesome"
  echo " 2) E17                 9) Fluxbox"
  echo " 3) GNOME              10) OpenBox"
  echo " 4) KDE"
  echo " 5) LXDE"
  echo " 6) Mate"
  echo " 7) XFCE"
  echo ""
  echo " b) POWRÓT"
  read_input $DESKTOPENV
  case "$OPTION" in
    1)
      #CINNAMON {{{
      print_title "CINNAMON - https://wiki.archlinux.org/index.php/Cinnamon"
      print_info "Cinnamon jest forkiem GNOME Shell, pierwotnie opracowany przez Linux Mint. Stara się zapewnić bardziej tradycyjne środowisko użytkownika oparte na metaforze pulpitu, podobnej do GNOME 2. Cynamon używa Muffin, forka  menedżera okien GNOME 3 - Muttera, jako menedżera okien."
      package_install "cinnamon"
      package_install "cinnamon-screensaver cinnamon-control-center nemo"
      package_install "gedit-plugins"
      package_install "gksu xdg-user-dirs-gtk gucharmap libgnomekbd"
      package_install "gvfs-smb gvfs-afc lxpolkit"
      aur_package_install "gnome-defaults-list"
      # extensions
      aur_package_install "cinnamon-applet-screenshot-record"
      aur_package_install "cinnamon-extension-coverflow-alt-tab"
      # config xinitrc
      config_xinitrc "cinnamon-session"
      #Tweaks
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-close-effect scale
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-close-time 250
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-close-transition easeInExpo
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-map-effect scale
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-map-time 350
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-map-transition easeOutBack
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-maximize-effect scale
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-maximize-time 150
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-maximize-transition easeInOutSine
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-minimize-effect scale
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-minimize-time 250
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-minimize-transition easeInOutSine
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-unmaximize-effect scale
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-unmaximize-time 150
      sudo -u ${username} gsettings set org.cinnamon desktop-effects-unmaximize-transition easeInOutSine
      CINNAMON=1
      pause_function
      install_themes "CINNAMON"
      #Gnome Display Manager (a reimplementation of xdm)
      system_ctl enable gdm
      #D-Bus interface for user account query and manipulation
      system_ctl enable accounts-daemon
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    2)
      #E17 {{{
      print_title "E17 - http://wiki.archlinux.org/index.php/E17"
      print_info "Enlightenment, zwane często po prostu E, jest stosowym menedżer okien dla X Window System, który może być stosowany sam, lub w połączeniu ze środowiskiem graficznym, takim jak GNOME czy KDE. Enlightenment jest często stosowany jako substytut pełnego środowiska graficznego."
      package_install "enlightenment"
      package_install "gvfs gvfs-smb gvfs-afc lxpolkit"
      package_install "xdg-user-dirs"
      package_install "leafpad epdfview"
      package_install "lxappearance"
      package_install "ttf-bitstream-vera ttf-dejavu"
      aur_package_install "gnome-defaults-list"
      # config xinitrc
      config_xinitrc "enlightenment_start"
      pause_function
      install_misc_apps "E17"
      install_themes "E17"
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    3)
      #GNOME {{{
      print_title "GNOME - https://wiki.archlinux.org/index.php/GNOME"
      print_info "GNOME to środowisko graficzne i graficzny interfejs użytkownika, który pracuje jako nakładka na system operacyjny komputera. Składa się wyłącznie z wolnego oprogramowania i oprogramowania open source. Jest to międzynarodowy projekt, który obejmuje stworzenie frameworków twozrących oprogramowanie, wybór aplikacji dla pulpitu oraz pracę nad programami, które pozwalają na uruchomienie aplikacji, obsługę plików oraz zarządzanie oknami i zadaniami."
      package_install "gnome gnome-extra telepathy"
      package_install "gedit-plugins gnome-tweak-tool gnome-power-manager gucharmap"
      package_install "gvfs-smb gvfs-afc gvfs-goa"
      package_install "deja-dup"
      aur_package_install "gnome-defaults-list nautilus-share"
      # config xinitrc
      config_xinitrc "gnome-session"
      GNOME=1
      pause_function
      install_themes "GNOME"
      #Gnome Display Manager (a reimplementation of xdm)
      system_ctl enable gdm
      #D-Bus interface for user account query and manipulation
      system_ctl enable accounts-daemon
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      #Improvements
      add_line "fs.inotify.max_user_watches = 524288" "/etc/sysctl.d/99-sysctl.conf"
      ;;
      #}}}
    4)
      #KDE {{{
      print_title "KDE - https://wiki.archlinux.org/index.php/KDE"
      print_info "KDE to wyprodukowany przez międzynarodową społeczność wolnego oprogramowania zintegrowany zestaw wieloplatformowych aplikacji zaprojektowanych do uruchomienia w systemach Linux, FreeBSD, Microsoft Windows, Solaris oraz Mac OS X. Jest on znany ze swojego Plasma Desktop, środowisko te jest dostarczane jako domyślne w wielu dystrybucjach Linuksa."
      echo " 1) Full install"
      echo " 2) Minimal install"
      echo ""
      read_input $KDE_INSTALL
      case "$OPTION" in
        2)
          package_install "kdebase phonon-gstreamer kde-l10n-$LOCALE_KDE"
          ;;
        *)
          package_install "kde phonon-gstreamer kde-l10n-$LOCALE_KDE kipi-plugins"
          package_remove "kdemultimedia-kscd kdemultimedia-juk kdebase-kwrite kdenetwork-kopete kdebase-konqueror"
          package_install "kde-telepathy telepathy"
          ;;
      esac
      package_install "xdg-user-dirs"
      aur_package_install "kde-gtk-config"
      aur_package_install "oxygen-gtk2 oxygen-gtk3 qtcurve-gtk2 qtcurve-kde4"
      is_package_installed "cups" && package_install "kdeutils-print-manager"
      # config xinitrc
      config_xinitrc "startkde"
      pause_function
      #QTCURVE THEMES #{{{
      curl -o Sweet.tar.gz http://kde-look.org/CONTENT/content-files/144205-Sweet.tar.gz
      curl -o Kawai.tar.gz http://kde-look.org/CONTENT/content-files/141920-Kawai.tar.gz
      tar zxvf Sweet.tar.gz
      tar zxvf Kawai.tar.gz
      rm Sweet.tar.gz
      rm Kawai.tar.gz
      mkdir -p /home/${username}/.kde4/share/apps/color-schemes
      mv Sweet/*.colors /home/${username}/.kde4/share/apps/color-schemes
      mv Kawai/*.colors /home/${username}/.kde4/share/apps/color-schemes
      mkdir -p /home/${username}/.kde4/share/apps/QtCurve
      mv Sweet/Sweet.qtcurve /home/${username}/.kde4/share/apps/QtCurve
      mv Kawai/Kawai.qtcurve /home/${username}/.kde4/share/apps/QtCurve
      chown -R ${username}:users /home/${username}/.kde4
      rm -fr Kawai Sweet
      #}}}
      #KDE CUSTOMIZATION {{{
      while true
      do
        print_title "DOSTOSOWYWANIE KDE"
        echo " 1) $(menu_item "apper")"
        echo " 2) $(menu_item "choqok")"
        echo " 3) $(menu_item "digikam")"
        echo " 4) $(menu_item "k3b")"
        echo " 5) $(menu_item "rosa-icons") $AUR"
        echo " 6) $(menu_item "caledonia-bundle") $AUR"
        echo " 7) $(menu_item "skrooge")"
        echo " 8) $(menu_item "yakuake")"
        echo ""
        echo " d) GOTOWE"
        echo ""
        KDE_OPTIONS+=" d"
        read_input_options "$KDE_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
          case "$OPT" in
            1)
              package_install "apper"
              ;;
            2)
              package_install "choqok"
              ;;
            3)
              package_install "digikam"
              ;;
            4)
              package_install "k3b cdrdao dvd+rw-tools"
              ;;
            5)
              aur_package_install "rosa-icons"
              ;;
            6)
              aur_package_install "caledonia-bundle"
              ;;
            7)
              package_install "skrooge"
              ;;
            8)
              package_install "yakuake"
              aur_package_install "yakuake-skin-plasma-oxygen-panel"
              ;;
            "d")
              break
              ;;
            *)
              invalid_option
              ;;
          esac
        done
        elihw
      done
      #}}}
      system_ctl enable kdm
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      # Tweaks
      # nepomuk
      add_line "fs.inotify.max_user_watches = 524288" "/etc/sysctl.d/99-sysctl.conf"
      # pulseaudio
      add_line "load-module module-device-manager" "/etc/pulse/default.pa"
      # speed up application startup
      mkdir -p ~/.compose-cache
      KDE=1
      ;;
      #}}}
    5)
      #LXDE {{{
      print_title "LXDE - http://wiki.archlinux.org/index.php/lxde"
      print_info "LXDE jest to wolne i otwarte środowisko graficzne dla Unix oraz innych zgodnych z POSIX platform, takich jak Linux lub BSD. Celem projektu jest stworzenie środowiska graficznego, które jest szybkie i energooszczędne."
      package_install "lxde upower"
      package_install "gvfs gvfs-smb gvfs-afc lxpolkit"
      package_install "xdg-user-dirs"
      package_install "leafpad obconf epdfview"
      aur_package_install "gnome-defaults-list"
      mkdir -p /home/${username}/.config/openbox/
      cp /etc/xdg/openbox/{menu.xml,rc.xml,autostart} /home/${username}/.config/openbox/
      chown -R ${username}:users /home/${username}/.config
      # config xinitrc
      config_xinitrc "startlxde"
      pause_function
      install_misc_apps "LXDE"
      install_themes "LXDE"
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    6)
      #MATE {{{
      print_title "MATE - https://wiki.archlinux.org/index.php/Mate"
      print_info "MATE Desktop Environment to fork GNOME 2, który ma zapewnić atrakcyjny i intuicyjny pulpit dla użytkowników Linuksa przy użyciu tradycyjnych metafor."
      package_install "mate mate-extra"
      package_install "gvfs gvfs-smb gvfs-afc lxpolkit"
      aur_package_install "gnome-defaults-list"
      # config xinitrc
      config_xinitrc "mate-session"
      pause_function
      install_display_manager
      install_themes "MATE"
      #D-Bus interface for user account query and manipulation
      system_ctl enable accounts-daemon
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    7)
      #XFCE {{{
      print_title "XFCE - https://wiki.archlinux.org/index.php/Xfce"
      print_info "Xfce jest wolnym środowiskiem graficznym dla systemów Unix i platform uniksowych, takich jak Linux, Solaris i BSD. Ma być ono szybkie i lekkie, a jednocześnie atrakcyjne wizualnie i łatwe w użyciu."
      package_install "xfce4 xfce4-goodies mupdf"
      package_install "gvfs gvfs-smb gvfs-afc lxpolkit"
      package_install "xdg-user-dirs"
      aur_package_install "gnome-defaults-list"
      # config xinitrc
      config_xinitrc "startxfce4"
      pause_function
      install_display_manager
      install_themes "XFCE"
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    8)
      #AWESOME {{{
      print_title "AWESOME - http://wiki.archlinux.org/index.php/Awesome"
      print_info "awesome jest wysoko konfigurowalnym, następnej generacji menedżerem okien dla X. Jest bardzo szybki, rozszerzalny i dostarczany na licencji GNU GPLv2."
      package_install "awesome"
      package_install "gvfs"
      package_install "lxappearance"
      package_install "leafpad epdfview nitrogen"
      package_install "ttf-bitstream-vera ttf-dejavu"
      aur_package_install "gnome-defaults-list"
      if [[ ! -d /home/${username}/.config/awesome/ ]]; then
        mkdir -p /home/${username}/.config/awesome/
        cp /etc/xdg/awesome/rc.lua /home/${username}/.config/awesome/
        chown -R ${username}:users /home/${username}/.config
      fi
      # config xinitrc
      config_xinitrc "awesome"
      pause_function
      install_misc_apps "AWESOME"
      install_themes "AWESOME"
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    9)
      #FLUXBOX {{{
      print_title "FLUXBOX - http://wiki.archlinux.org/index.php/Fluxbox"
      print_info "Fluxbox to kolejny menedżer okien dla X11. Bazuje na (porzuconym obecnie) kodzie Blackboksa 0.61.1, ale z wieloma udoskonaleniami i ciągłością rozwoju. Fluxbox jest mało zasobny i szybny ale zapewnia ciekawe narzędzia do zarządzania oknami, takie jak zakładki i grupowanie."
      package_install "fluxbox menumaker"
      package_install "lxappearance"
      package_install "xdg-user-dirs"
      package_install "leafpad epdfview"
      package_install "ttf-bitstream-vera ttf-dejavu"
      aur_package_install "gnome-defaults-list"
      # config xinitrc
      config_xinitrc "startfluxbox"
      install_misc_apps "FLUXBOX"
      install_themes "FLUXBOX"
      pause_function
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    10)
      #OPENBOX {{{
      print_title "OPENBOX - http://wiki.archlinux.org/index.php/Openbox"
      print_info "Openbox jest lekkim i wysoko konfigurowalnym menedżerem okien z dużym wsparciem dla standardów."
      package_install "openbox obconf obmenu menumaker"
      package_install "lxappearance"
      package_install "xdg-user-dirs"
      package_install "leafpad epdfview nitrogen"
      package_install "ttf-bitstream-vera ttf-dejavu"
      aur_package_install "gnome-defaults-list"
      mkdir -p /home/${username}/.config/openbox/
      cp /etc/xdg/openbox/{menu.xml,rc.xml,autostart} /home/${username}/.config/openbox/
      chown -R ${username}:users /home/${username}/.config
      # config xinitrc
      config_xinitrc "openbox-session"
      pause_function
      install_misc_apps "OPENBOX"
      install_themes "OPENBOX"
      #Abstraction for enumerating power devices, listening to device events and querying history and statistics
      system_ctl enable upower
      ;;
      #}}}
    "b")
      break
      ;;
    *)
      invalid_option
      install_desktop_environment
      ;;
  esac
  #MTP SUPPORT {{{
  if is_package_installed "libmtp" ; then
    [[ ${KDE} -eq 1 ]] && package_install "kio-mtp" || package_install "gvfs-mtp"
  fi
  #}}}
  #Fix p7FM {{{
  [[ ${KDE} -eq 0 ]] && package_install "wxgtk2.8"
  #}}}
}
#}}}
#CONNMAN/NETWORKMANAGER/WICD {{{
install_nm_wicd(){
  print_title "MENEDŻERY SIECI"
  echo " 1) Networkmanager"
  echo " 2) Wicd"
  echo " 3) ConnMan"
  echo ""
  echo " n) ŻADEN"
  echo ""
  read_input $NETWORKMANAGER
  case "$OPTION" in
    1)
      print_title "NETWORKMANAGER - https://wiki.archlinux.org/index.php/Networkmanager"
      print_info "NetworkManager to program do wykrywania i dostarczania konfiguracji dla systemów do automatycznego łączenia się z siecią. Funkcjonalność NetworkManager może być przydatna zarówno dla sieci przewodowych i bezprzewodowych."
      if [[ ${KDE} -eq 1 ]]; then
        package_install "networkmanager dnsmasq kdeplasma-applets-plasma-nm"
      else
        package_install "networkmanager dnsmasq network-manager-applet"
      fi
      is_package_installed "ntp" && package_install "networkmanager-dispatcher-ntpd"
      # Network Management daemon
      system_ctl enable NetworkManager
      pause_function
      ;;
    2)
      print_title "WICD - https://wiki.archlinux.org/index.php/Wicd"
      print_info "Wicd jest menedżerem połączenia sieciowego, który może zarządzać interfejsami bezprzewodowymi i przewodowymi, podobnie jak w  alternatywnym NetworkManagerze."
      if [[ ${KDE} -eq 1 ]]; then
        aur_package_install "wicd wicd-kde"
      else
        package_install "wicd wicd-gtk"
      fi
      # WICD daemon
      system_ctl enable wicd
      pause_function
      ;;
    3)
      print_title "CONNMAN - https://wiki.archlinux.org/index.php/Connman"
      print_info "ConnMan jest alternatywą dla NetworkManagera i Wicd, został stworzony przez firmę Intel i projekt Moblin do stosowania w urządzeniach wbudowanych."
      package_install "connman "
      # ConnMan daemon
      system_ctl enable connman
      pause_function
      ;;
  esac
}
#}}}
#USB 3G MODEM {{{
install_usb_modem(){
  print_title "USB 3G MODEM - https://wiki.archlinux.org/index.php/USB_3G_Modem"
  print_info "Wiele sieci telefonii komórkowej na całym świecie oferują połączenia do Internetu poprzez telefony UMTS (EDGE, lub GSM), za pomocą przenośnego modemu USB."
  read_input_text "Zainstaluj wsparcie dla modemów 3G" $USBMODEM
  if [[ $OPTION == y ]]; then
    package_install "usbutils usb_modeswitch"
    is_package_installed "networkmanager" && package_install "modemmanager" || package_install "wvdial"
    pause_function
  fi
}
#}}}
#ACCESSORIES {{{
install_accessories_apps(){
  while true
  do
    print_title "APLIKACJE NARZĘDZIOWE"
    echo " 1) $(menu_item "cairo-dock")"
    echo " 2) $(menu_item "catfish")"
    echo " 3) $(menu_item "conky-lua") $AUR"
    echo " 4) $(menu_item "docky") $AUR"
    echo " 5) $(menu_item "galculator") $AUR"
    echo " 6) $(menu_item "kupfer") $AUR"
    echo " 7) $(menu_item "pamac-aur" "Pamac") $AUR"
    echo " 8) $(menu_item "pyrenamer") $AUR"
    echo " 9) $(menu_item "shutter") $AUR"
    echo "10) $(menu_item "springseed") $AUR"
    echo "11) $(menu_item "stormcloud") $AUR"
    echo "12) $(menu_item "synapse")"
    echo "13) $(menu_item "terminator")"
    echo "14) $(menu_item "zim")"
    echo ""
    echo " b) POWRÓT"
    echo ""
    ACCESSORIES_OPTIONS+=" b"
    read_input_options "$ACCESSORIES_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "cairo-dock cairo-dock-plugins"
          ;;
        2)
          package_install "catfish"
          ;;
        3)
          aur_package_install "conky-lua"
          ;;
        4)
          package_install "docky"
          aur_package_install "dockmanager"
          ;;
        5)
          package_install "galculator"
          ;;
        6)
          aur_package_install "kupfer"
          ;;
        7)
          aur_package_install "pamac-aur"
          ;;
        8)
          aur_package_install "pyrenamer"
          ;;
        9)
          aur_package_install "shutter"
          ;;
        10)
          aur_package_install "springseed"
          ;;
        11)
          aur_package_install "stormcloud"
          ;;
        12)
          package_install "synapse"
          ;;
        13)
          package_install "terminator"
          ;;
        14)
          package_install "zim"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#DEVELOPEMENT {{{
install_development_apps(){
  while true
  do
    print_title "APLIKACJE DEWELOPERSKIE"
    echo " 1) $(menu_item "aptana-studio") $AUR"
    echo " 2) $(menu_item "bluefish")"
    echo " 3) $(menu_item "eclipse")"
    echo " 4) $(menu_item "emacs")"
    echo " 5) $(menu_item "gvim")"
    echo " 6) $(menu_item "geany")"
    echo " 7) $(menu_item "intellij-idea-community-edition" "IntelliJ IDEA")"
    echo " 8) $(menu_item "kdevelop")"
    echo " 9) $(menu_item "monodevelop")"
    echo "10) $(menu_item "netbeans")"
    echo "11) $(menu_item "nodejs")"
    echo "12) $(menu_item "ruby" "Ruby on Rails")"
    echo "13) $(menu_item "jdk7-openjdk" "OpenJDK")"
    echo "14) $(menu_item "jdk" "Oracle JDK") $AUR"
    echo "15) $(menu_item "qtcreator")"
    echo "16) $(menu_item "sublime-text-dev" "Sublime Text") $AUR"
    echo "17) $(menu_item "gdb" "Debuggers")"
    echo "18) $(menu_item "mysql-workbench-gpl" "MySQL Workbench") $AUR"
    echo "19) $(menu_item "navicat-premium" "Navicat Premium") $AUR"
    echo "20) $(menu_item "meld")"
    echo ""
    echo " b) POWRÓT"
    echo ""
    DEVELOPMENT_OPTIONS+=" b"
    read_input_options "$DEVELOPMENT_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          aur_package_install "aptana-studio"
          ;;
        2)
          package_install "bluefish"
          ;;
        3)
          #ECLIPSE {{{
          while true
          do
            print_title "ECLIPSE - https://wiki.archlinux.org/index.php/Eclipse"
            print_info "Eclipse to projekt Open Source, który ma na celu zapewnienie uniwersalnej platformy deweloperskiej."
            echo " 1) $(menu_item "eclipse")"
            echo " 2) $(menu_item "eclipse-cdt" "Eclipse IDE for C/C++ Developers")"
            echo " 3) $(menu_item "eclipse-android" "Android Development Tools for Eclipse") $AUR"
            echo " 4) $(menu_item "eclipse-wtp-wst" "Web Development Tools for Eclipse") $AUR"
            echo " 5) $(menu_item "eclipse-pdt" "PHP Development Tools for Eclipse ") $AUR"
            echo " 6) $(menu_item "eclipse-pydev" "Python Development Tools for Eclipse") $AUR"
            echo " 7) $(menu_item "eclipse-aptana" "Aptana Studio plugin for Eclipse") $AUR"
            echo " 8) $(menu_item "eclipse-vrapper" "Vim-like editing plugin for Eclipse ") $AUR"
            echo " 9) $(menu_item "eclipse-egit" "Git support plugin for Eclipse") $AUR"
            echo "10) $(menu_item "eclipse-eclipsecolortheme" "Eclipse Colortheme") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            ECLIPSE_OPTIONS+=" b"
            read_input_options "$ECLIPSE_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "eclipse"
                  ;;
                2)
                  package_install "eclipse-cdt"
                  ;;
                3)
                  aur_package_install "android-sdk android-apktool android-sdk-build-tools android-sdk-platform-tools android-udev eclipse-android libmtp"
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "kio-mtp"
                  else
                    package_install "gvfs-mtp"
                  fi
                  aur_package_install "simple-mtpfs"
                  groupadd android
                  add_user_to_group ${username} android
                  add_user_to_group ${username} adbusers
                  chgrp -R android /opt/android-sdk
                  chmod -R g+w /opt/android-sdk
                  find /opt/android-sdk -type d -exec chmod g+s {} \;
                  ;;
                4)
                  aur_package_install "eclipse-wtp-wst"
                  ;;
                5)
                  aur_package_install "eclipse-pdt"
                  ;;
                6)
                  aur_package_install "eclipse-pydev"
                  ;;
                7)
                  aur_package_install "eclipse-aptana"
                  ;;
                8)
                  aur_package_install "eclipse-vrapper"
                  ;;
                9)
                  aur_package_install "eclipse-egit"
                  ;;
                10)
                  aur_package_install "eclipse-eclipsecolortheme"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=3
          ;;
        4)
          package_install "emacs"
          ;;
        5)
          package_remove "vim"
          package_install "gvim ctags"
          ;;
        6)
          package_install "geany"
          ;;
        7)
          package_install "intellij-idea-community-edition"
          ;;
        8)
          package_install "kdevelop"
          ;;
        9)
          package_install "monodevelop monodevelop-debugger-gdb"
          ;;
        10)
          package_install "netbeans"
          ;;
        11)
          package_install "nodejs"
          #NODEJS {{{
          while true
          do
            print_title "NODEJS - http://nodejs.org"
            print_info "Node.js jest platformą zbudowaną na środowisku wykonawczym Chrome's JavaScript do łatwego tworzenia szybkich i skalowalnych aplikacji sieciowych. Node.js używa sterowanego zdarzeniami, nieblokowalnego modelu I/O, który czyni to łatwym i przyjemnym, doskonałym dla przetwarzających duże ilości danych aplikacji czasu rzeczywistego, które działają w urządzeniach rozproszonych."
            echo " 1) backbone"
            echo " 2) bower"
            echo " 3) coffee-script"
            echo " 4) express"
            echo " 5) grunt"
            echo " 6) jshint"
            echo " 7) jslint"
            echo " 8) less"
            echo " 9) markdown"
            echo "10) mocha"
            echo "11) stylus"
            echo "12) uglify-js"
            echo "13) underscore"
            echo "14) Yeoman"
            echo ""
            echo " b) POWRÓT"
            echo ""
            NODEJS_OPTIONS+=" b"
            read_input_options "$NODEJS_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  npm_install "backbone"
                  ;;
                2)
                  npm_install "bower"
                  ;;
                3)
                  npm_install "coffee-script"
                  ;;
                4)
                  npm_install "express"
                  ;;
                5)
                  npm_install "grunt grunt-cli"
                  ;;
                6)
                  npm_install "jshint"
                  ;;
                7)
                  npm_install "jslint"
                  ;;
                8)
                  npm_install "less"
                  ;;
                9)
                  npm_install "markdown"
                  ;;
                10)
                  npm_install "mocha"
                  ;;
                11)
                  npm_install "stylus"
                  ;;
                12)
                  npm_install "uglify-js"
                  ;;
                13)
                  npm_install "underscore"
                  ;;
                14)
                  npm_install "yo grunt-cli bower generator-angular"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=11
          ;;
        12)
          aur_package_install "ruby"
          gem_install "rails haml"
          ;;
        13)
          package_remove "jdk"
          package_install "jdk7-openjdk icedtea-web-java7"
          ;;
        14)
          package_remove "jre7-openjdk"
          package_remove "jdk7-openjdk"
          aur_package_install "jdk"
          ;;
        15)
          package_install "qtcreator"
          mkdir -p /home/${username}/.config/Nokia/qtcreator/styles
          curl -o monokai.xml http://angrycoding.googlecode.com/svn/branches/qt-creator-monokai-theme/monokai.xml
          mv monokai.xml /home/${username}/.config/Nokia/qtcreator/styles/
          chown -R ${username}:users /home/${username}/.config
          ;;
        16)
          aur_package_install "sublime-text-dev"
          ;;
        17)
          package_install "splint valgrind gdb" #C/C++
          aur_package_install "php-codesniffer php-tidy" #PHP
          aur_package_install "closure-compiler" #Javascript
          aur_package_install "tidyhtml" #HTML
          ;;
        18)
          aur_package_install "mysql-workbench-gpl"
          ;;
        19)
          aur_package_install "navicat-premium"
          ;;
        20)
          package_install "meld"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#OFFICE {{{
install_office_apps(){
  while true
  do
    print_title "APLIKACJE BIUROWE"
    echo " 1) $(menu_item "libreoffice-common" "LibreOffice")"
    echo " 2) $(menu_item "goffice calligra" "$([[ ${KDE} -eq 1 ]] && echo "Caligra" || echo "Abiword + Gnumeric";)")"
    echo " 3) $(menu_item "texlive-core" "latex")"
    echo " 4) $(menu_item "calibre")"
    echo " 5) $(menu_item "gcstar")"
    echo " 6) $(menu_item "geeknote-git") $AUR"
    echo " 7) $(menu_item "homebank")"
    echo " 8) $(menu_item "impressive")"
    echo " 9) $(menu_item "nitrotasks") $AUR"
    echo "10) $(menu_item "ocrfeeder")"
    echo "11) $(menu_item "uberwriter") $AUR"
    echo "12) $(menu_item "xmind") $AUR"
    echo ""
    echo " b) POWRÓT"
    echo ""
    OFFICE_OPTIONS+=" b"
    read_input_options "$OFFICE_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          print_title "LIBREOFFICE - https://wiki.archlinux.org/index.php/LibreOffice"
          package_install "libreoffice-$LOCALE_LO libreoffice-common libreoffice-base libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-math libreoffice-writer"
          aur_package_install "hunspell-$LOCALE_HS"
          aur_package_install "aspell-$LOCALE_AS"
          [[ ${KDE} -eq 1 ]] && package_install "libreoffice-kde4" || package_install "libreoffice-gnome"
          ;;
        2)
          if [[ ${KDE} -eq 1 ]]; then
            package_install "calligra"
          else
            package_install "gnumeric abiword abiword-plugins"
          fi
          aur_package_install "hunspell-$LOCALE_HS"
          aur_package_install "aspell-$LOCALE_AS"
          ;;
        3)
          package_install "texlive-most"
          if [[ $LOCALE == pt_BR ]]; then
            aur_package_install "abntex"
          fi
          read_input_text "Install texmaker?"
          [[ $OPTION == y ]] && aur_package_install "texmaker"
          ;;
        4)
          package_install "calibre"
          ;;
        5)
          package_install "gcstar"
          ;;
        6)
          package_install "geeknote-git"
          ;;
        7)
          package_install "homebank"
          ;;
        8)
          package_install "impressive"
          ;;
        9)
          aur_package_install "nitrotasks"
          ;;
        10)
          package_install "ocrfeeder tesseract gocr"
          aur_package_install "aspell-$LOCALE_AS"
          ;;
        11)
          aur_package_install "uberwriter"
          ;;
        12)
          aur_package_install "xmind"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#SYSTEM TOOLS {{{
install_system_apps(){
  while true
  do
    print_title "NARZĘDZIA SYSTEMU"
    echo " 1) $(menu_item "clamav")"
    echo " 2) $(menu_item "firewalld")"
    echo " 3) $(menu_item "ufw")"
    echo " 4) $(menu_item "gparted")"
    echo " 5) $(menu_item "grsync")"
    echo " 6) $(menu_item "htop")"
    echo " 7) $(menu_item "virtualbox")"
    echo " 8) $(menu_item "webmin")"
    echo " 9) $(menu_item "wine")"
    echo ""
    echo " b) POWRÓT"
    echo ""
    SYSTEMTOOLS_OPTIONS+=" b"
    read_input_options "$SYSTEMTOOLS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "clamav"
          cp /etc/clamav/clamd.conf.sample /etc/clamav/clamd.conf
          cp /etc/clamav/freshclam.conf.sample /etc/clamav/freshclam.conf
          sed -i '/Example/d' /etc/clamav/freshclam.conf
          sed -i '/Example/d' /etc/clamav/clamd.conf
          system_ctl enable clamd
          freshclam
          ;;
        2)
          print_title "FirewallD - https://fedoraproject.org/wiki/FirewallD"
          print_info "FirewaLLD dostarcza dynamicznie zarządzany firewall z obsługą stref sieci/firewall, aby określić poziom zaufania połączeń sieciowych i interfejsów. Posiada wsparcie dla ustawień zapory IPv4, IPv6 i dla mostów ethernetowych oraz rozdział stałych i uruchomieniowych opcji konfiguracyjnych. Dostarcza także interfejs dla dodawania reguł zapory bezpośrednio dla usług i aplikacji."
          is_package_installed "ufw" && package_remove "ufw"
          is_package_installed "firewalld" && package_remove "firewalld"
          package_install "firewalld"
          system_ctl enable firewalld
          ;;
        3)
          print_title "UFW - https://wiki.archlinux.org/index.php/Ufw"
          print_info "Ufw to skrót od Uncomplicated Firewall, jest programem do zarządzania zaporą netfilter. Dostarcza interfejs tekstowy i stara się być nieskomplikowany i prosty w użyciu."
          is_package_installed "firewalld" && package_remove "firewalld"
          aur_package_install "ufw gufw"
          system_ctl enable ufw
          ;;
        4)
          package_install "gparted"
          ;;
        5)
          package_install "grsync"
          ;;
        6)
          package_install "htop"
          ;;
        7)
          #Make sure we are not a VirtualBox Guest
          VIRTUALBOX_GUEST=`dmidecode --type 1 | grep VirtualBox`
          if [[ -z ${VIRTUALBOX_GUEST} ]]; then
            package_install "virtualbox virtualbox-host-modules virtualbox-guest-iso"
            aur_package_install "virtualbox-ext-oracle"
            add_user_to_group ${username} vboxusers
            add_module "vboxdrv vboxnetflt" "virtualbox-host"
            modprobe vboxdrv vboxnetflt
          else
            cecho " ${BBlue}[${Reset}${Bold}!${BBlue}]${Reset} VirtualBox was not installed as we are a VirtualBox guest."
          fi
          ;;
        8)
          package_install "webmin perl-net-ssleay"
          system_ctl enable webmin
          ;;
        9)
          package_install "icoutils wine wine_gecko wine-mono winetricks"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#GRAPHICS {{{
install_graphics_apps(){
  while true
  do
    print_title "APLIKACJE GRAFICZNE"
    echo " 1) $(menu_item "blender")"
    echo " 2) $(menu_item "gimp")"
    echo " 3) $(menu_item "gthumb")"
    echo " 4) $(menu_item "inkscape")"
    echo " 5) $(menu_item "mcomix")"
    echo " 6) $(menu_item "mypaint")"
    echo " 7) $(menu_item "pencil") $AUR"
    echo " 8) $(menu_item "scribus")"
    echo " 9) $(menu_item "shotwell")"
    echo "10) $(menu_item "simple-scan")"
    echo "11) $(menu_item "xnviewmp") $AUR"
    echo ""
    echo " b) POWRÓT"
    echo ""
    GRAPHICS_OPTIONS+=" b"
    read_input_options "$GRAPHICS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "blender"
          ;;
        2)
          package_install "gimp"
          aur_package_install "gimphelp-scriptfu gimpfx-foundry"
          ;;
        3)
          package_install "gthumb"
          ;;
        4)
          package_install "inkscape python2-numpy python-lxml"
          aur_package_install "sozi"
          ;;
        5)
          package_install "mcomix"
          ;;
        6)
          package_install "mypaint"
          ;;
        7)
          aur_package_install "pencil"
          ;;
        8)
          package_install "scribus"
          ;;
        9)
          package_install "shotwell"
          ;;
        10)
          package_install "simple-scan"
          ;;
        11)
          aur_package_install "xnviewmp"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#INTERNET {{{
install_internet_apps(){
  while true
  do
    print_title "APLIKACJE INTERNETOWE"
    echo " 1) Przeglądarki internetowe"
    echo " 2) Pobieranie|Dzielenie się plikami"
    echo " 3) Email|RSS"
    echo " 4) Komunikatory|IRC"
    echo " 5) Mapy"
    echo " 6) VNC|Współdzielenie pulpitu"
    echo ""
    echo " b) POWRÓT"
    echo ""
    INTERNET_OPTIONS+=" b"
    read_input_options "$INTERNET_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          #BROWSER {{{
          while true
          do
            print_title "PRZEGLĄDARKI INTERNETOWE"
            echo " 1) $(menu_item "chromium")"
            echo " 2) $(menu_item "google-chrome") $AUR"
            echo " 3) $(menu_item "rekonq midori" "$([[ ${KDE} -eq 1 ]] && echo "Rekonq" || echo "Midori";)")"
            echo " 4) $(menu_item "firefox")"
            echo " 5) $(menu_item "opera")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            BROWSERS_OPTIONS+=" b"
            read_input_options "$BROWSERS_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "chromium"
                  aur_package_install "chromium-pepper-flash chromium-libpdf"
                  ;;
                2)
                  aur_package_install "google-chrome"
                  ;;
                3)
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "rekonq"
                  else
                    package_install "midori"
                  fi
                  ;;
                4)
                  package_install "firefox firefox-i18n-$LOCALE_FF firefox-adblock-plus flashplugin "
                  # speedup firefox load
                  package_install "upx"
                  upx --best /usr/lib/firefox/firefox
                  ;;
                5)
                  package_install "opera"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=1
          ;;
        2)
          #DOWNLOAD|FILESHARE {{{
          while true
          do
            print_title "POBIERANIE|DZIELENIE SIĘ PLIKAMI"
            echo " 1) $(menu_item "aerofs") $AUR"
            echo " 2) $(menu_item "btsync" "BitTorrent Sync") $AUR"
            echo " 3) $(menu_item "deluge")"
            echo " 4) $(menu_item "dropbox") $AUR"
            echo " 5) $(menu_item "flareget") $AUR"
            echo " 6) $(menu_item "jdownloader") $AUR"
            echo " 7) $(menu_item "qbittorrent") $AUR"
            echo " 8) $(menu_item "sparkleshare")"
            echo " 9) $(menu_item "spideroak") $AUR"
            echo "10) $(menu_item "transmission-qt transmission-gtk" "Transmission")"
            echo "11) $(menu_item "uget")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            DOWNLOAD_OPTIONS+=" b"
            read_input_options "$DOWNLOAD_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  aur_package_install "aerofs"
                  ;;
                2)
                  aur_package_install "btsync"
                  ;;
                3)
                  package_install "deluge"
                  ;;
                4)
                  aur_package_install "dropbox"
                  add_line "fs.inotify.max_user_watches = 524288" "/etc/sysctl.d/99-sysctl.conf"
                  ;;
                5)
                  aur_package_install "flareget"
                  ;;
                6)
                  aur_package_install "jdownloader"
                  ;;
                7)
                  aur_package_install "qbittorrent"
                  ;;
                8)
                  package_install "sparkleshare"
                  ;;
                9)
                  aur_package_install "spideroak"
                  ;;
                10)
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "transmission-qt"
                  else
                    package_install "transmission-gtk"
                  fi
                  if [[ -f /home/${username}/.config/transmission/settings.json ]]; then
                    replace_line '"blocklist-enabled": false' '"blocklist-enabled": true' /home/${username}/.config/transmission/settings.json
                    replace_line "www\.example\.com\/blocklist" "list\.iblocklist\.com\/\?list=bt_level1&fileformat=p2p&archiveformat=gz" /home/${username}/.config/transmission/settings.json
                  fi

                  ;;
                11)
                  package_install "uget"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=2
          ;;
        3)
          #EMAIL {{{
          while true
          do
            print_title "EMAIL|RSS"
            echo " 1) $(menu_item "thunderbird")"
            echo " 2) $(menu_item "liferea")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            EMAIL_OPTIONS+=" b"
            read_input_options "$EMAIL_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "thunderbird thunderbird-i18n-$LOCALE_TB"
                  ;;
                2)
                  package_install "liferea"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=3
          ;;
        4)
          #IM|IRC {{{
          while true
          do
            print_title "IM - KOMUNIKATORY"
            echo " 1) $(menu_item "emesene")"
            echo " 2) $(menu_item "google-talkplugin") $AUR"
            echo " 3) $(menu_item "pidgin")"
            echo " 4) $(menu_item "skype")"
            echo " 5) $(menu_item "teamspeak3")"
            echo " 6) $(menu_item "irssi")"
            echo " 7) $(menu_item "konversation hexchat" "$([[ ${KDE} -eq 1 ]] && echo "Konversation" || echo "Hexchat";)")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            IM_OPTIONS+=" b"
            read_input_options "$IM_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "emesene"
                  ;;
                2)
                  aur_package_install "google-talkplugin"
                  ;;
                3)
                  package_install "pidgin"
                  ;;
                4)

                  is_package_installed "ekiga" && package_remove "ekiga"
                  package_install "skype"
                  ;;
                5)
                  package_install "teamspeak3"
                  ;;
                6)
                  package_install "irssi"
                  ;;
                7)
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "konversation"
                  else
                    package_install "hexchat"
                  fi
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=4
          ;;
        5)
          #MAPPING {{{
          while true
          do
            print_title "MAPY"
            echo " 1) $(menu_item "google-earth") $AUR"
            echo " 2) $(menu_item "worldwind" "NASA World Wind") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            MAPPING_OPTIONS+=" b"
            read_input_options "$MAPPING_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  aur_package_install "google-earth"
                  ;;
                2)
                  aur_package_install "worldwind"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=5
          ;;
        6)
          #DESKTOP SHARE {{{
          while true
          do
            print_title "WSPÓŁDZIELENIE PULPITU"
            echo " 1) $(menu_item "remmina")"
            echo " 2) $(menu_item "teamviewer") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            VNC_OPTIONS+=" b"
            read_input_options "$VNC_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "remmina"
                  ;;
                2)
                  aur_package_install "teamviewer"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=6
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#AUDIO {{{
install_audio_apps(){
  while true
  do
    print_title "APLIKACJE AUDIO"
    echo " 1) Odtwarzacze Audio"
    echo " 2) Edytory audio|Narzędzia"
    echo " 3) Kodeki"
    echo ""
    echo " b) POWRÓT"
    echo ""
    AUDIO_OPTIONS+=" b"
    read_input_options "$AUDIO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          #PLAYERS {{{
          while true
          do
            print_title "ODTWARZACZE AUDIO"
            echo " 1) $(menu_item "amarok")"
            echo " 2) $(menu_item "audacious")"
            echo " 3) $(menu_item "banshee")"
            echo " 4) $(menu_item "clementine")"
            echo " 5) $(menu_item "deadbeef")"
            echo " 6) $(menu_item "guayadeque")"
            echo " 7) $(menu_item "musique") $AUR"
            echo " 8) $(menu_item "nuvolaplayer") $AUR"
            echo " 9) $(menu_item "rhythmbox")"
            echo "10) $(menu_item "radiotray") $AUR"
            echo "11) $(menu_item "spotify") $AUR"
            echo "12) $(menu_item "tomahawk") $AUR"
            echo "13) $(menu_item "timidity++")"
            echo "14) $(menu_item "xnoise")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            AUDIO_PLAYER_OPTIONS+=" b"
            read_input_options "$AUDIO_PLAYER_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "amarok"
                  ;;
                2)
                  package_install "audacious audacious-plugins"
                  ;;
                3)
                  package_install "banshee"
                  ;;
                4)
                  package_install "clementine"
                  ;;
                5)
                  package_install "deadbeef"
                  ;;
                6)
                  package_install "guayadeque"
                  ;;
                7)
                  aur_package_install "musique"
                  ;;
                8)
                  aur_package_install "nuvolaplayer"
                  ;;
                9)
                  package_install "rhythmbox grilo grilo-plugins libgpod libdmapsharing gnome-python python-mako pywebkitgtk"
                  ;;
                10)
                  aur_package_install "radiotray"
                  ;;
                11)
                  aur_package_install "spotify"
                  ;;
                12)
                  aur_package_install "tomahawk"
                  ;;
                13)
                  aur_package_install "timidity++ fluidr3"
                  echo -e 'soundfont /usr/share/soundfonts/fluidr3/FluidR3GM.SF2' >> /etc/timidity++/timidity.cfg
                  ;;
                14)
                  package_install "xnoise"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=1
          ;;
        2)
          #EDITORS {{{
          while true
          do
            print_title "EDYTORY AUDIO|NARZĘDZIA"
            echo " 1) $(menu_item "soundconverter soundkonverter" "$([[ ${KDE} -eq 1 ]] && echo "Soundkonverter" || echo "Soundconverter";)")"
            echo " 2) $(menu_item "easytag")"
            echo " 3) $(menu_item "audacity")"
            echo " 4) $(menu_item "ocenaudio") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            AUDIO_EDITOR_OPTIONS+=" b"
            read_input_options "$AUDIO_EDITOR_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "soundkonverter"
                  else
                    package_install "soundconverter"
                  fi
                  ;;
                2)
                  package_install "easytag"
                  ;;
                3)
                  package_install "audacity"
                  ;;
                4)
                  aur_package_install "ocenaudio"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=2
          ;;
        3)
          package_install "gst-plugins-base gst-plugins-base-libs gst-plugins-good \
                           gst-plugins-bad gst-plugins-ugly gst-libav"
          package_install "gstreamer0.10 gstreamer0.10-plugins"
          [[ ${KDE} -eq 1 ]] && package_install "phonon-gstreamer"
          # Use the 'standard' preset by default. This preset should generally be
          # transparent to most people on most music and is already quite high in quality.
          # The resulting bitrate should be in the 170-210kbps range, according to music
          # complexity.
          sudo -u ${username} gconftool-2 --type string --set /system/gstreamer/0.10/audio/profiles/mp3/pipeline "audio/x-raw-int,rate=44100,channels=2 ! lame name=enc preset=1001 ! id3v2mux"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#VIDEO {{{
install_video_apps(){
  while true
  do
    print_title "APLIKACJE WIDEO"
    echo " 1) Odtwarzacze Wideo"
    echo " 2) Edytory|Narzędzia"
    echo " 3) Kodeki"
    echo ""
    echo " b) POWRÓT"
    echo ""
    VIDEO_OPTIONS+=" b"
    read_input_options "$VIDEO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          #PLAYERS {{{
          while true
          do
            print_title "ODTWARZACZE WIDEO"
            echo " 1) $(menu_item "audience-bzr") $AUR"
            echo " 2) $(menu_item "gnome-mplayer")"
            echo " 3) $(menu_item "parole")"
            echo " 4) $(menu_item "minitube") $AUR"
            echo " 5) $(menu_item "miro")"
            echo " 6) $(menu_item "rosa-media-player") $AUR"
            echo " 7) $(menu_item "smplayer")"
            echo " 8) $(menu_item "vlc")"
            echo " 9) $(menu_item "xbmc")"
            echo "10) $(menu_item "mpv")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            VIDEO_PLAYER_OPTIONS+=" b"
            read_input_options "$VIDEO_PLAYER_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  aur_package_install "audience-bzr"
                  ;;
                2)
                  package_install "gnome-mplayer"
                  ;;
                3)
                  package_install "parole"
                  ;;
                4)
                  aur_package_install "minitube"
                  ;;
                5)
                  package_install "miro"
                  ;;
                6)
                  aur_package_install "rosa-media-player"
                  ;;
                7)
                  package_install "smplayer smplayer-themes"
                  ;;
                8)
                  package_install "vlc"
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "phonon-vlc"
                  fi
                  ;;
                9)
                  package_install "xbmc"
                  add_user_to_group ${username} xbmc
                  ;;
                10)
                  package_install "mpv"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=1
          ;;
        2)
          #EDITORS {{{
          while true
          do
            print_title "EDYTORY|NARZĘDZIA"
            echo " 1) $(menu_item "avidemux-gtk avidemux-qt" "Avidemux")"
            echo " 2) $(menu_item "arista-transcoder" "Arista") $AUR"
            echo " 3) $(menu_item "handbrake")"
            echo " 4) $(menu_item "transmageddon")"
            echo " 5) $(menu_item "kdeenlive")"
            echo " 6) $(menu_item "openshot")"
            echo " 7) $(menu_item "pitivi")"
            echo " 8) $(menu_item "kazam-bzr") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            VIDEO_EDITOR_OPTIONS+=" b"
            read_input_options "$VIDEO_EDITOR_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "avidemux-qt"
                  else
                    package_install "avidemux-gtk"
                  fi
                  ;;
                2)
                  aur_package_install "arista-transcoder"
                  ;;
                3)
                  package_install "handbrake"
                  ;;
                4)
                  package_install "transmageddon"
                  ;;
                5)
                  package_install "kdenlive"
                  ;;
                6)
                  package_install "openshot"
                  ;;
                7)
                  package_install "pitivi frei0r-plugins"
                  ;;
                8)
                  aur_package_install "kazam-bzr"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=2
          ;;
        3)
          package_install "libbluray libquicktime libdvdread libdvdnav libdvdcss cdrdao"
          if [[ $ARCHI == i686 ]]; then
            aur_package_install "codecs"
          else
            aur_package_install "codecs64"
          fi
          aur_package_install "libaacs"
          sudo -u ${username} mkdir -p /home/${username}/.config/aacs/ &&
            cd /home/${username}/.config/aacs/ &&
            wget http://vlc-bluray.whoknowsmy.name/files/KEYDB.cfg
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#GAMES {{{
install_games(){
  while true
  do
    print_title "GRY - https://wiki.archlinux.org/index.php/Games"
    echo " 1) Action|Adventure"
    echo " 2) Arcade|Platformer"
    echo " 3) Dungeon"
    echo " 4) Emulators"
    echo " 5) FPS"
    echo " 6) MMO"
    echo " 7) Puzzle"
    echo " 8) RPG"
    echo " 9) Racing"
    echo "10) Simulation"
    echo "11) Strategy"
    echo "12) PlayOnLinux"
    echo "13) Steam"
    echo ""
    echo " b) POWRÓT"
    echo ""
    GAMES_OPTIONS+=" b"
    read_input_options "$GAMES_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          #ACTION|ADVENTURE {{{
          while true
          do
            print_title "ACTION AND ADVENTURE"
            echo " 1) $(menu_item "astromenace")"
            echo " 2) $(menu_item "counter-strike-2d" "Counter-Strike 2D") $AUR"
            echo " 3) $(menu_item "dead-cyborg-episode1" "Dead Cyborg") $AUR"
            echo " 4) $(menu_item "mars-shooter" "M.A.R.S.") $AUR"
            echo " 5) $(menu_item "nikki") $AUR"
            echo " 6) $(menu_item "opentyrian-hg") $AUR"
            echo " 7) $(menu_item "srb2" "Sonic Robot Blast 2") $AUR"
            echo " 8) $(menu_item "steelstorm") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""

            ACTION+=" b"
            read_input_options "$ACTION"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "astromenace"
                  ;;
                2)
                  aur_package_install "counter-strike-2d"
                  ;;
                3)
                  aur_package_install "dead-cyborg-episode1"
                  ;;
                4)
                  aur_package_install "mars-shooter"
                  ;;
                5)
                  aur_package_install "nikki"
                  ;;
                6)
                  aur_package_install "opentyrian-hg"
                  ;;
                7)
                  aur_package_install "srb2"
                  ;;
                8)
                  aur_package_install "steelstorm"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=1
          ;;
        2)
          #ARCADE|PLATFORMER {{{
          while true
          do
            print_title "ARCADE AND PLATFORMER"
            echo " 1) $(menu_item "abuse")"
            echo " 2) $(menu_item "btanks" "Battle Tanks")"
            echo " 3) $(menu_item "bomberclone")"
            echo " 4) $(menu_item "funguloids" "Those Funny Funguloids") $AUR"
            echo " 5) $(menu_item "frogatto")"
            echo " 6) $(menu_item "goonies") $AUR"
            echo " 7) $(menu_item "mari0") $AUR"
            echo " 8) $(menu_item "neverball")"
            echo " 9) $(menu_item "opensonic") $AUR"
            echo "10) $(menu_item "robombs_bin" "Robombs") $AUR"
            echo "11) $(menu_item "smc" "Super Maryo Chronicles")"
            echo "12) $(menu_item "xmoto")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            ARCADE+=" b"
            read_input_options "$ARCADE"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "abuse"
                  ;;
                2)
                  package_install "btanks"
                  ;;
                3)
                  package_install "bomberclone"
                  ;;
                4)
                  aur_package_install "funguloids"
                  ;;
                5)
                  package_install "frogatto"
                  ;;
                6)
                  aur_package_install "goonies"
                  ;;
                7)
                  aur_package_install "mari0"
                  ;;
                8)
                  package_install "neverball"
                  ;;
                9)
                  aur_package_install "opensonic"
                  ;;
                10)
                  aur_package_install "robombs_bin"
                  ;;
                11)
                  package_install "smc"
                  ;;
                12)
                  package_install "xmoto"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=2
          ;;
        3)
          #DUNGEON {{{
          while true
          do
            print_title "DUNGEON"
            echo " 1) $(menu_item "adom") $AUR"
            echo " 2) $(menu_item "tome4" "Tales of MajEyal") $AUR"
            echo " 3) $(menu_item "lostlabyrinth" "Lost Labyrinth") $AUR"
            echo " 4) $(menu_item "scourge" "S.C.O.U.R.G.E.") $AUR"
            echo " 5) $(menu_item "stone-soupe" "Stone-Soupe")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            DUNGEON+=" b"
            read_input_options "$DUNGEON"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  aur_package_install "adom"
                  ;;
                2)
                  aur_package_install "tome4"
                  ;;
                3)
                  aur_package_install "lostlabyrinth"
                  ;;
                4)
                  aur_package_install "scourge"
                  ;;
                5)
                  aur_package_install "stone-soup"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=3
          ;;
        4)
          #EMULATORS {{{
          while true
          do
            print_title "EMULATORS"
            echo " 1) $(menu_item "higan-gtk higan-qt" "BSNES")"
            echo " 2) $(menu_item "desmume") $AUR"
            echo " 3) $(menu_item "dolphin-emu" "Dolphin") $AUR"
            echo " 4) $(menu_item "epsxe") $AUR"
            echo " 5) $(menu_item "project64") $AUR"
            echo " 6) $(menu_item "snesx9x")"
            echo " 7) $(menu_item "vba-m-gtk" "VisualBoyAdvanced") $AUR"
            echo " 8) $(menu_item "wxmupen64plus") $AUR"
            echo " 9) $(menu_item "zsnes")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            EMULATORS+=" b"
            read_input_options "$EMULATORS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  if [[ ${KDE} -eq 1 ]]; then
                    package_install "higan-qt"
                  else
                    package_install "higan-gtk"
                  fi
                  ;;
                2)
                  aur_package_install "desmume"
                  ;;
                3)
                  aur_package_install "dolphin-emu"
                  ;;
                4)
                  aur_package_install "epsxe"
                  ;;
                5)
                  aur_package_install "project64"
                  ;;
                6)
                  package_install "snes9x-gtk"
                  ;;
                7)
                  aur_package_install "vba-m-gtk"
                  ;;
                8)
                  aur_package_install "wxmupen64plus"
                  ;;
                9)
                  package_install "zsnes"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=4
          ;;
        5)
          #FPS {{{
          while true
          do
            print_title "FPS"
            echo " 1) $(menu_item "alienarena")"
            echo " 2) $(menu_item "warsow")"
            echo " 3) $(menu_item "enemy-territory" "Wolfenstein: Enemy Territory") $AUR"
            echo " 4) $(menu_item "worldofpadman" "World of Padman") $AUR"
            echo " 5) $(menu_item "xonotic")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            FPS+=" b"
            read_input_options "$FPS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "alienarena"
                  ;;
                2)
                  package_install "warsow"
                  ;;
                3)
                  aur_package_install "enemy-territory"
                  ;;
                4)
                  aur_package_install "worldofpadman"
                  ;;
                5)
                  package_install "xonotic"
                  ;;

                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=5
          ;;
        6)
          #MMO {{{
          while true
          do
            print_title "MMO"
            echo " 1) $(menu_item "hon" "Heroes of Newerth") $AUR"
            echo " 2) $(menu_item "leagueoflegends" "League of Legends") $AUR"
            echo " 3) $(menu_item "manaplus") $AUR"
            echo " 4) $(menu_item "unix-runescape-client" "Runescape") $AUR"
            echo " 5) $(menu_item "savage2") $AUR"
            echo " 6) $(menu_item "spiral-knights") $AUR"
            echo " 7) $(menu_item "wakfu") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            MMO+=" b"
            read_input_options "$MMO"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  aur_package_install "hon"
                  ;;
                2)
                  aur_package_install "leagueoflegends"
                  add_user_to_group ${username} "lol"
                  ;;
                3)
                  aur_package_install "manaplus"
                  ;;
                4)
                  aur_package_install "unix-runescape-client"
                  ;;
                5)
                  aur_package_install "savage2"
                  ;;
                6)
                  aur_package_install "spiral-knights"
                  ;;
                7)
                  aur_package_install "wakfu"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=6
          ;;
        7)
          #PUZZLE {{{
          while true
          do
            print_title "PUZZLE"
            echo " 1) $(menu_item "frozen-bubble")"
            echo " 2) $(menu_item "puzzle-moppet-bin") $AUR"
            echo " 3) $(menu_item "numptyphysics-svn") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            PUZZLE+=" b"
            read_input_options "$PUZZLE"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "frozen-bubble"
                  ;;
                2)
                  aur_package_install "puzzle-moppet-bin"
                  ;;
                3)
                  aur_package_install "numptyphysics-svn"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=7
          ;;
        8)
          #RPG {{{
          while true
          do
            print_title "RPG"
            echo " 1) $(menu_item "ardentryst") $AUR"
            echo " 2) $(menu_item "flare-rpg") $AUR"
            echo " 3) $(menu_item "freedroidrpg" "Freedroid RPG")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            RPG+=" b"
            read_input_options "$RPG"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  aur_package_install "ardentryst"
                  ;;
                2)
                  aur_package_install "flare-rpg"
                  ;;
                3)
                  package_install "freedroidrpg"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=8
          ;;
        9)
          #RACING {{{
          while true
          do
            print_title "RACING"
            echo " 1) $(menu_item "maniadrive") $AUR"
            echo " 2) $(menu_item "death-rally") $AUR"
            echo " 3) $(menu_item "stuntrally") $AUR"
            echo " 4) $(menu_item "supertuxkart")"
            echo " 5) $(menu_item "speed-dreams")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            RACING+=" b"
            read_input_options "$RACING"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  aur_package_install "maniadrive"
                  ;;
                2)
                  aur_package_install "death-rally"
                  ;;
                3)
                  aur_package_install "stuntrally"
                  ;;
                4)
                  package_install "supertuxkart"
                  ;;
                5)
                  package_install "speed-dreams"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=9
          ;;
        10)
          #SIMULATION {{{
          while true
          do
            print_title "SIMULATION"
            echo " 1) $(menu_item "simutrans")"
            echo " 2) $(menu_item "corsix-th" "Theme Hospital") $AUR"
            echo " 3) $(menu_item "openttd")"
            echo ""
            echo " b) POWRÓT"
            echo ""
            SIMULATION+=" b"
            read_input_options "$SIMULATION"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "simutrans"
                  ;;
                2)
                  aur_package_install "corsix-th"
                  ;;
                3)
                  package_install "openttd"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=10
          ;;
        11)
          #STRATEGY {{{
          while true
          do
            print_title "STRATEGY"
            echo " 1) $(menu_item "0ad")"
            echo " 2) $(menu_item "hedgewars")"
            echo " 3) $(menu_item "megaglest")"
            echo " 4) $(menu_item "unknown-horizons") $AUR"
            echo " 5) $(menu_item "warzone2100")"
            echo " 6) $(menu_item "wesnoth")"
            echo " 7) $(menu_item "zod") $AUR"
            echo ""
            echo " b) POWRÓT"
            echo ""
            STRATEGY+=" b"
            read_input_options "$STRATEGY"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "0ad"
                  ;;
                2)
                  package_install "hedgewars"
                  ;;
                3)
                  package_install "megaglest"
                  ;;
                4)
                  package_install "unknow-horizons"
                  ;;
                5)
                  package_install "warzone2100"
                  ;;
                6)
                  package_install "wesnoth"
                  ;;
                7)
                  aur_package_install "commander-zod"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=11
          ;;
        12)
          aur_package_install "playonlinux"
          ;;
        13)
          aur_package_install "steam"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#WEBSERVER {{{
install_web_server(){
  install_adminer(){ #{{{
    aur_package_install "adminer"
    local ADMINER=`cat /etc/httpd/conf/httpd.conf | grep Adminer`
    [[ -z $ADMINER ]] && echo -e '\n# Adminer Configuration\nInclude conf/extra/httpd-adminer.conf' >> /etc/httpd/conf/httpd.conf
  } #}}}
  install_mariadb(){ #{{{
    package_install "mariadb"
    /usr/bin/mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
    system_ctl enable mysqld
    systemctl start mysqld
    /usr/bin/mysql_secure_installation
  } #}}}
  install_postgresql(){ #{{{
    package_install "postgresql"
    systemd-tmpfiles --create postgresql.conf
    mkdir -p /var/lib/postgres
    chown -R postgres:postgres /var/lib/postgres
    echo "Enter your new postgres account password:"
    passwd postgres
    su - postgres -c "initdb --locale ${LOCALE}.UTF-8 -D /var/lib/postgres/data"
    system_ctl enable postgresql
    system_ctl start postgresql
    read_input_text "Zainstaluj Postgis" $POSTGIS
    [[ $OPTION == y ]] && install_postgis
  } #}}}
  install_postgis(){ #{{{
    package_install "postgis"
    sudo -u postgres createuser --superuser $username
    sudo -u postgres createdb $username
    sudo -u ${username} psql -d postgres -c "UPDATE pg_database SET datistemplate=FALSE WHERE datname='template1';"
    sudo -u ${username} psql -d postgres -c "DROP DATABASE template1;"
    sudo -u ${username} psql -d postgres -c "CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';"
    sudo -u ${username} psql -d postgres -c "UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';"
    sudo -u ${username} psql -d postgres -c "\c template1"
    sudo -u ${username} psql -d postgres -c "VACUUM FREEZE;"
    sudo -u ${username} psql -d postgres -c "UPDATE pg_database SET datallowconn=FALSE WHERE datname='template1';"

    POSTGIS_VERSION=`pacman -Qi postgis | sed '2!d' | awk '{print substr($3,0,3)}'`
    POSTGIS_PATH=`pg_config --sharedir`/contrib/postgis-$POSTGIS_VERSION

    sudo -u ${username} psql -d postgres -c "UPDATE pg_database SET datistemplate=FALSE WHERE datname='template_postgis';"
    sudo -u ${username} dropdb template_postgis

    sudo -u ${username} createdb -E UTF8 template_postgis
    sudo -u ${username} createlang -d template_postgis plpgsql
    sudo -u ${username} psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='template_postgis';"

    #PostGIS:
        sudo -u ${username} psql -d template_postgis -f $POSTGIS_PATH/postgis.sql
        sudo -u ${username} psql -d template_postgis -f $POSTGIS_PATH/spatial_ref_sys.sql
        #psql -d template_postgis -f $POSTGIS_PATH/postgis_comments.sql
    #with raster support:
        sudo -u ${username} psql -d template_postgis -f $POSTGIS_PATH/rtpostgis.sql
        #sudo -u ${username} psql -d template_postgis -f $POSTGIS_PATH/raster_comments.sql
    #with topology support:
        #sudo -u ${username} psql -d template_postgis -f $POSTGIS_PATH/topology.sql
        #sudo -u ${username} psql -d template_postgis -f $POSTGIS_PATH/topology_comments.sql

    sudo -u ${username} psql -d template_postgis -c "GRANT ALL ON geometry_columns TO PUBLIC;"
    sudo -u ${username} psql -d template_postgis -c "GRANT ALL ON geography_columns TO PUBLIC;"
    sudo -u ${username} psql -d template_postgis -c "GRANT ALL ON spatial_ref_sys TO PUBLIC;"

    echo -e "GeoDB Template: createdb -T template_postgis -E UTF8 <db_name>"
  } #}}}
  configure_php(){ #{{{
    if [[ -f /etc/php/php.ini.pacnew ]]; then
      mv -v /etc/php/php.ini /etc/php/php.ini.pacold
      mv -v /etc/php/php.ini.pacnew /etc/php/php.ini
      rm -v /etc/php/php.ini.aui
    fi
    [[ -f /etc/php/php.ini.aui ]] && echo "/etc/php/php.ini.aui" || cp -v /etc/php/php.ini /etc/php/php.ini.aui
    if [[ $1 == mariadb ]]; then
      sed -i '/mysqli.so/s/^;//' /etc/php/php.ini
      sed -i '/mysql.so/s/^;//' /etc/php/php.ini
      sed -i '/skip-networking/s/^/#/' /etc/mysql/my.cnf
    else
      sed -i '/pgsql.so/s/^;//' /etc/php/php.ini
    fi
    sed -i '/mcrypt.so/s/^;//' /etc/php/php.ini
    sed -i '/gd.so/s/^;//' /etc/php/php.ini
    sed -i '/display_errors=/s/off/on/' /etc/php/php.ini
  } #}}}
  configure_php_apache(){ #{{{
    if [[ -f /etc/httpd/conf/httpd.conf.pacnew ]]; then
      mv -v /etc/httpd/conf/httpd.conf.pacnew /etc/httpd/conf/httpd.conf
      rm -v /etc/httpd/conf/httpd.conf.aui
    fi
    [[ -f /etc/httpd/conf/httpd.conf.aui ]] && echo "/etc/httpd/conf/httpd.conf.aui" || cp -v /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.aui
    local MOD_PHP=`cat /etc/httpd/conf/httpd.conf | grep php5_module.conf`
    if [[ -z $MOD_PHP ]]; then
      echo -e 'application/x-httpd-php5                php php5' >> /etc/httpd/conf/mime.types
      sed -i '/LoadModule dir_module modules\/mod_dir.so/a\LoadModule php5_module modules\/libphp5.so' /etc/httpd/conf/httpd.conf
      echo -e '\n# Use for PHP 5.x:\nInclude conf/extra/php5_module.conf\n\nAddHandler php5-script php' >> /etc/httpd/conf/httpd.conf
      replace_line 'DirectoryIndex\ index.html' 'DirectoryIndex\ index.html\ index.php' /etc/httpd/conf/httpd.conf
    fi
  } #}}}
  configure_php_nginx(){ #{{{
    if [[ -f /etc/nginx/nginx.conf.pacnew ]]; then
      mv -v /etc/nginx/nginx.conf.pacnew /etc/nginx/nginx.conf
      rm -v /etc/nginx/nginx.conf.aui
    fi
    [[ -f /etc/nginx/nginx.conf.aui ]] && cp -v /etc/nginx/nginx.conf.aui /etc/nginx/nginx.conf || cp -v /etc/nginx/nginx.conf /etc/nginx/nginx.conf.aui
    sed -i -e '/location ~ \.php$ {/,/}/d' /etc/nginx/nginx.conf
    sed -i -e '/pass the PHP/a\        #\n        location ~ \.php$ {\n            fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;\n            fastcgi_index  index.php;\n            root           /srv/http;\n            include        fastcgi.conf;\n        }' /etc/nginx/nginx.conf
  } #}}}
  create_sites_folder(){ #{{{
    [[ ! -f  /etc/httpd/conf/extra/httpd-userdir.conf.aui ]] && cp -v /etc/httpd/conf/extra/httpd-userdir.conf /etc/httpd/conf/extra/httpd-userdir.conf.aui
    replace_line 'public_html' 'Sites' /etc/httpd/conf/extra/httpd-userdir.conf
    su - ${username} -c "mkdir -p ~/Sites"
    su - ${username} -c "chmod o+x ~/ && chmod -R o+x ~/Sites"
    print_line
    echo "The folder \"Sites\" has been created in your home"
    echo "You can access your projects at \"http://localhost/~username\""
    pause_function
  } #}}}
  print_title "WEB SERVER - https://wiki.archlinux.org/index.php/LAMP|LAPP"
  print_info "*Adminer jest domyślnie instalowany we wszystkich opcjach"
  echo " 1) LAMP - APACHE, MariaDB & PHP"
  echo " 2) LAPP - APACHE, POSTGRESQL & PHP"
  echo " 3) LEMP - NGINX, MariaDB & PHP"
  echo " 4) LEPP - NGINX, POSTGRESQL & PHP"
  echo ""
  echo " b) POWRÓT"
  echo ""
  read_input $WEBSERVER
  case "$OPTION" in
    1)
      package_install "apache php php-apache php-mcrypt php-gd"
      install_mariadb
      install_adminer
      system_ctl enable httpd
      configure_php_apache
      configure_php "mariadb"
      create_sites_folder
      ;;
    2)
      package_install "apache php php-apache php-pgsql php-gd"
      install_postgresql
      install_adminer
      system_ctl enable httpd
      configure_php_apache
      configure_php "postgresql"
      create_sites_folder
      ;;
    3)
      package_install "nginx php php-mcrypt php-fpm"
      install_mariadb
      system_ctl enable nginx
      system_ctl enable php-fpm
      configure_php_nginx
      configure_php "mariadb"
      ;;
    4)
      package_install "nginx php php-fpm php-pgsql"
      install_postgresql
      system_ctl enable nginx
      system_ctl enable php-fpm
      configure_php_nginx
      configure_php "postgresql"
      ;;
  esac
}
#}}}
#FONTS {{{
install_fonts(){
  while true
  do
    print_title "FONTY - https://wiki.archlinux.org/index.php/Fonts"
    echo " 1) $(menu_item "ttf-dejavu")"
    echo " 2) $(menu_item "ttf-funfonts") $AUR"
    echo " 3) $(menu_item "ttf-google-fonts-git") $AUR"
    echo " 4) $(menu_item "ttf-liberation")"
    echo " 5) $(menu_item "ttf-ms-fonts") $AUR"
    echo " 6) $(menu_item "ttf-vista-fonts") $AUR"
    echo " 7) $(menu_item "wqy-microhei") (Chinese/Japanese/Korean Support)"
    echo ""
    echo " b) POWRÓT"
    echo ""
    FONTS_OPTIONS+=" b"
    read_input_options "$FONTS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "ttf-dejavu"
          ;;
        2)
          aur_package_install "ttf-funfonts"
          ;;
        3)
          package_remove "ttf-droid"
          package_remove "ttf-roboto"
          package_remove "ttf-ubuntu-font-family"
          package_remove "otf-oswald-ib"
          aur_package_install "ttf-google-fonts-git"
          ;;
        4)
          package_install "ttf-liberation"
          ;;
        5)
          aur_package_install "ttf-ms-fonts"
          ;;
        6)
          aur_package_install "ttf-vista-fonts"
          ;;
        7)
          package_install "wqy-microhei"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
clean_orphan_packages(){
  print_title "CZYSZCZENIE OSIEROCONYCH PAKIETÓW"
  pacman -Rsc --noconfirm $(pacman -Qqdt)
  #pacman -Sc --noconfirm
  pacman-optimize
}
#}}}
#RECONFIGURE SYSTEM {{{
reconfigure_system(){
  print_title "MAPA ZNAKÓW - https://wiki.archlinux.org/index.php/KEYMAP"
  print_info "Wybór KEYMAP zapisany jest w pliku /etc/rc.conf. Określa jaka mapa znaków używana jest w wirtualnych konsolach. Pliki z układem klawiatury dostarczane są przez pakiet kbd."
  OPTION=n
  while [[ $OPTION != y ]]; do
    getkeymap
    read_input_text "Confirm keymap: $KEYMAP"
  done
  localectl set-keymap ${KEYMAP}

  print_title "NAZWA HOSTA - https://wiki.archlinux.org/index.php/HOSTNAME"
  print_info "Nazwa hosta to unikalna nazwa utworzona w celu identyfikacji urządzenia w sieci. Nazwy hostów są ograniczone do znaków alfanumerycznych.\nMyślnik (-) może być użyty, ale nazwa hosta nie może się nim zacząć ani zakończyć. Długość jest ograniczona do 63 znaków."
  read -p "Hostname [ex: archlinux]: " HN
  hostnamectl set-hostname $HN

  print_title "STREFA CZASOWA - https://wiki.archlinux.org/index.php/Timezone"
  print_info "W systemie operacyjnym czas (zegar) jest określany przez cztery części: Wartość czasu, Czas standardowy (godzina), Strefa Czasowa, oraz DTS (Daylight Saving Time - Okresowe Zmiany Czasu) jeśli jest używany."
  OPTION=n
  while [[ $OPTION != y ]]; do
    settimezone
    read_input_text "Confirm timezone ($ZONE/$SUBZONE)"
  done
  timedatectl set-timezone ${ZONE}/${SUBZONE}

  print_title "CZAS ZEGARA SPRZĘTOWEGO - https://wiki.archlinux.org/index.php/Internationalization"
  print_info "Jest on ustawiany w /etc/adjtime. Ustaw tryb zegara sprzętowego, aby ujednolicić czas między systemami operacyjnymi na tym samym sprzęcie. W innym przypadku, mogą one nadpisywać czas i powodować zmiany zegara (może to powodować, że korekta zmiany czasu może być rozregulowana)."
  hwclock_list=('UTC' 'Localtime');
  PS3="$prompt1"
  select OPT in "${hwclock_list[@]}"; do
    case "$REPLY" in
      1)
        timedatectl set-local-rtc false
        ;;
      2)
        timedatectl set-local-rtc true
        ;;
      *) invalid_option ;;
    esac
    [[ -n $OPT ]] && break
  done
  timedatectl set-ntp true
}
#}}}
#EXTRA {{{
install_extra(){
  while true
  do
    print_title "EXTRA"
    echo " 1) Global Menu $AUR"
    echo " b) POWRÓT"
    echo ""
    EXTRA_OPTIONS+=" b"
    read_input_options "$EXTRA_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          aur_package_install "gtk2-appmenu gtk3-appmenu"
          if [[ ${KDE} -eq 1 ]]; then
            aur_package_install "appmenu-qt appmenu-gtk"
            aur_package_install "kdeplasma-applets-menubar"
          fi
          if [[ ! -f /home/${username}/.config/gtk-3.0/settings.ini ]]; then
            sudo -u ${username} echo -e "[Settings]\ngtk-shell-shows-menubar = 1" > /home/${username}/.config/gtk-3.0/settings.ini
          else
            add_line "gtk-shell-shows-menubar = 1" "/home/${username}/.config/gtk-3.0/settings.ini"
          fi
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#FINISH {{{
finish(){
  print_title "UWAGA: PAKIETY INSTALOWANE Z AUR"
  print_danger "Lista oficjalnie niewspieranych pakietów, które mogą zabić twojego kota:"
  pause_function
  AUR_PKG_LIST="${AUI_DIR}/aur_pkg_list.log"
  pacman -Qm | awk '{print $1}' > $AUR_PKG_LIST
  less $AUR_PKG_LIST
  print_title "INSTALACJA UKOŃCZONA"
  echo -e "Dzięki za używanie Archlinux Ultimate Install autorstwa helmuthdu\n"
  #REBOOT
  read -p "Zrestartować system? [y/N]: " OPTION
  [[ $OPTION == y ]] && reboot
  exit 0
}
#}}}

welcome
check_root
check_archlinux
check_hostname
check_connection
check_pacman_blocked
system_upgrade
language_selector
configure_sudo
select_user
choose_aurhelper
install_powerpill
automatic_mode

if is_package_installed "kdebase-workspace"; then KDE=1; fi

while true
do
  print_title "ARCHLINUX ULTIMATE INSTALL - https://github.com/helmuthdu/aui"
  echo " 1) $(mainmenu_item "${checklist[1]}" "Konfiguracja podstawowa")"
  echo " 2) $(mainmenu_item "${checklist[2]}" "Środowisko graficzne|Menedżer okien")"
  echo " 3) $(mainmenu_item "${checklist[3]}" "Aplikacje narzędziowe")"
  echo " 4) $(mainmenu_item "${checklist[4]}" "Aplikacje deweloperskie")"
  echo " 5) $(mainmenu_item "${checklist[5]}" "Aplikacje biurowe")"
  echo " 6) $(mainmenu_item "${checklist[6]}" "Narzędzia systemu")"
  echo " 7) $(mainmenu_item "${checklist[7]}" "Aplikacje graficzne")"
  echo " 8) $(mainmenu_item "${checklist[8]}" "Aplikacje internetowe")"
  echo " 9) $(mainmenu_item "${checklist[9]}" "Aplikacje audio")"
  echo "10) $(mainmenu_item "${checklist[10]}" "Aplikacje wideo")"
  echo "11) $(mainmenu_item "${checklist[11]}" "Gry")"
  echo "12) $(mainmenu_item "${checklist[12]}" "Serwer")"
  echo "13) $(mainmenu_item "${checklist[13]}" "Fonty")"
  echo "14) $(mainmenu_item "${checklist[14]}" "Extra")"
  echo "15) $(mainmenu_item "${checklist[15]}" "Czyszczenie osieroconych pakietów")"
  echo "16) $(mainmenu_item "${checklist[16]}" "Rekonfiguracja systemu")"
  echo ""
  echo " q) Wyjście"
  echo ""
  MAINMENU+=" q"
  read_input_options "$MAINMENU"
  for OPT in ${OPTIONS[@]}; do
    case "$OPT" in
      1)
        add_custom_repositories
        install_basic_setup
        install_ssh
        install_nfs
        install_samba
        install_tlp
        enable_readahead
        install_zram
        install_xorg
        install_video_cards
        font_config
        install_cups
        install_additional_firmwares
        install_git_tor
        checklist[1]=1
        ;;
      2)
        if [[ checklist[1] -eq 0 ]]; then
          print_danger "\nUWAGA: MUSISZ NAJPIERW URUCHOMIĆ PODSTAWOWĄ KONFIGURACJE"
          read_input_text "Jesteś pewien, że chcesz kontynuować?"
          [[ $OPTION != y ]] && continue
        fi
        install_desktop_environment
        install_nm_wicd
        install_usb_modem
        checklist[2]=1
        ;;
      3)
        install_accessories_apps
        checklist[3]=1
        ;;
      4)
        install_development_apps
        checklist[4]=1
        ;;
      5)
        install_office_apps
        checklist[5]=1
        ;;
      6)
        install_system_apps
        checklist[6]=1
        ;;
      7)
        install_graphics_apps
        checklist[7]=1
        ;;
      8)
        install_internet_apps
        checklist[8]=1
        ;;
      9)
        install_audio_apps
        checklist[9]=1
        ;;
      10)
        install_video_apps
        checklist[10]=1
        ;;
      11)
        install_games
        checklist[11]=1
        ;;
      12)
        install_web_server
        checklist[12]=1
        ;;
      13)
        install_fonts
        checklist[13]=1
        ;;
      14)
        install_extra
        checklist[14]=1
        ;;
      15)
        clean_orphan_packages
        checklist[15]=1
        ;;
      16)
        print_danger "\nUWAGA: TA OPCJA ZREKONFIGURUJE TAKIE RZECZY JAK  NAZWA HOSTA, STREFA CZASOWA, ZEGAR..."
        read_input_text "Jesteś pewien, że chcesz kontynuować?"
        [[ $OPTION != y ]] && continue
        reconfigure_system
        checklist[16]=1
        ;;
      "q")
        finish
        ;;
      *)
        invalid_option
        ;;
    esac
  done
done
#}}}
